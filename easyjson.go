// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package test

import (
	json "encoding/json"
	jsontext "github.com/go-json-experiment/json/jsontext"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeTest(in *jlexer.Lexer, out *twitterUserEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			if m, ok := out.URL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.URL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.URL = in.Interface()
			}
		case "entities":
			(out.Entities).UnmarshalEasyJSON(in)
		case "protected":
			out.Protected = bool(in.Bool())
		case "followers_count":
			out.FollowersCount = int(in.Int())
		case "friends_count":
			out.FriendsCount = int(in.Int())
		case "listed_count":
			out.ListedCount = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "favourites_count":
			out.FavouritesCount = int(in.Int())
		case "utc_offset":
			out.UtcOffset = int(in.Int())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "geo_enabled":
			out.GeoEnabled = bool(in.Bool())
		case "verified":
			out.Verified = bool(in.Bool())
		case "statuses_count":
			out.StatusesCount = int(in.Int())
		case "lang":
			out.Lang = string(in.String())
		case "contributors_enabled":
			out.ContributorsEnabled = bool(in.Bool())
		case "is_translator":
			out.IsTranslator = bool(in.Bool())
		case "is_translation_enabled":
			out.IsTranslationEnabled = bool(in.Bool())
		case "profile_background_color":
			out.ProfileBackgroundColor = string(in.String())
		case "profile_background_image_url":
			out.ProfileBackgroundImageURL = string(in.String())
		case "profile_background_image_url_https":
			out.ProfileBackgroundImageURLHTTPS = string(in.String())
		case "profile_background_tile":
			out.ProfileBackgroundTile = bool(in.Bool())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "profile_image_url_https":
			out.ProfileImageURLHTTPS = string(in.String())
		case "profile_banner_url":
			out.ProfileBannerURL = string(in.String())
		case "profile_link_color":
			out.ProfileLinkColor = string(in.String())
		case "profile_sidebar_border_color":
			out.ProfileSidebarBorderColor = string(in.String())
		case "profile_sidebar_fill_color":
			out.ProfileSidebarFillColor = string(in.String())
		case "profile_text_color":
			out.ProfileTextColor = string(in.String())
		case "profile_use_background_image":
			out.ProfileUseBackgroundImage = bool(in.Bool())
		case "default_profile":
			out.DefaultProfile = bool(in.Bool())
		case "default_profile_image":
			out.DefaultProfileImage = bool(in.Bool())
		case "following":
			out.Following = bool(in.Bool())
		case "follow_request_sent":
			out.FollowRequestSent = bool(in.Bool())
		case "notifications":
			out.Notifications = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest(out *jwriter.Writer, in twitterUserEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		if m, ok := in.URL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.URL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.URL))
		}
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		(in.Entities).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int(int(in.FollowersCount))
	}
	{
		const prefix string = ",\"friends_count\":"
		out.RawString(prefix)
		out.Int(int(in.FriendsCount))
	}
	{
		const prefix string = ",\"listed_count\":"
		out.RawString(prefix)
		out.Int(int(in.ListedCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"favourites_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavouritesCount))
	}
	{
		const prefix string = ",\"utc_offset\":"
		out.RawString(prefix)
		out.Int(int(in.UtcOffset))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"geo_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.GeoEnabled))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"statuses_count\":"
		out.RawString(prefix)
		out.Int(int(in.StatusesCount))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"contributors_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.ContributorsEnabled))
	}
	{
		const prefix string = ",\"is_translator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslator))
	}
	{
		const prefix string = ",\"is_translation_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslationEnabled))
	}
	{
		const prefix string = ",\"profile_background_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundColor))
	}
	{
		const prefix string = ",\"profile_background_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURL))
	}
	{
		const prefix string = ",\"profile_background_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_background_tile\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileBackgroundTile))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"profile_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_banner_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBannerURL))
	}
	{
		const prefix string = ",\"profile_link_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileLinkColor))
	}
	{
		const prefix string = ",\"profile_sidebar_border_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarBorderColor))
	}
	{
		const prefix string = ",\"profile_sidebar_fill_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarFillColor))
	}
	{
		const prefix string = ",\"profile_text_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileTextColor))
	}
	{
		const prefix string = ",\"profile_use_background_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileUseBackgroundImage))
	}
	{
		const prefix string = ",\"default_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfile))
	}
	{
		const prefix string = ",\"default_profile_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfileImage))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Bool(bool(in.Following))
	}
	{
		const prefix string = ",\"follow_request_sent\":"
		out.RawString(prefix)
		out.Bool(bool(in.FollowRequestSent))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		out.Bool(bool(in.Notifications))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v twitterUserEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v twitterUserEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *twitterUserEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *twitterUserEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest(l, v)
}
func easyjsonC5a4559bDecodeTest1(in *jlexer.Lexer, out *twitterURLEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]twitterURLEasyJSON, 0, 0)
					} else {
						out.URLs = []twitterURLEasyJSON{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 twitterURLEasyJSON
					(v1).UnmarshalEasyJSON(in)
					out.URLs = append(out.URLs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "expanded_url":
			out.ExpandedURL = string(in.String())
		case "display_url":
			out.DisplayURL = string(in.String())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Indices = append(out.Indices, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest1(out *jwriter.Writer, in twitterURLEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.URLs {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix)
		out.String(string(in.ExpandedURL))
	}
	{
		const prefix string = ",\"display_url\":"
		out.RawString(prefix)
		out.String(string(in.DisplayURL))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Indices {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v twitterURLEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v twitterURLEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *twitterURLEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *twitterURLEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest1(l, v)
}
func easyjsonC5a4559bDecodeTest2(in *jlexer.Lexer, out *twitterStatusEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonC5a4559bDecode(in, &out.Metadata)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = int64(in.Int64Str())
		case "text":
			out.Text = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "in_reply_to_status_id":
			out.InReplyToStatusID = int64(in.Int64())
		case "in_reply_to_status_id_str":
			out.InReplyToStatusIDStr = int64(in.Int64Str())
		case "in_reply_to_user_id":
			out.InReplyToUserID = int64(in.Int64())
		case "in_reply_to_user_id_str":
			out.InReplyToUserIDStr = int64(in.Int64Str())
		case "in_reply_to_screen_name":
			out.InReplyToScreenName = string(in.String())
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "geo":
			if m, ok := out.Geo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Geo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Geo = in.Interface()
			}
		case "coordinates":
			if m, ok := out.Coordinates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coordinates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coordinates = in.Interface()
			}
		case "place":
			if m, ok := out.Place.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Place.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Place = in.Interface()
			}
		case "contributors":
			if m, ok := out.Contributors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Contributors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Contributors = in.Interface()
			}
		case "retweeted_status":
			if in.IsNull() {
				in.Skip()
				out.RetweeetedStatus = nil
			} else {
				if out.RetweeetedStatus == nil {
					out.RetweeetedStatus = new(twitterStatusEasyJSON)
				}
				(*out.RetweeetedStatus).UnmarshalEasyJSON(in)
			}
		case "retweet_count":
			out.RetweetCount = int(in.Int())
		case "favorite_count":
			out.FavoriteCount = int(in.Int())
		case "entities":
			(out.Entities).UnmarshalEasyJSON(in)
		case "favorited":
			out.Favorited = bool(in.Bool())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "possibly_sensitive":
			out.PossiblySensitive = bool(in.Bool())
		case "lang":
			out.Lang = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest2(out *jwriter.Writer, in twitterStatusEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjsonC5a4559bEncode(out, in.Metadata)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.IDStr))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.InReplyToStatusID))
	}
	{
		const prefix string = ",\"in_reply_to_status_id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.InReplyToStatusIDStr))
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.InReplyToUserID))
	}
	{
		const prefix string = ",\"in_reply_to_user_id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.InReplyToUserIDStr))
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		out.String(string(in.InReplyToScreenName))
	}
	if true {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		if m, ok := in.Geo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Geo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Geo))
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if m, ok := in.Coordinates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coordinates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coordinates))
		}
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		if m, ok := in.Place.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Place.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Place))
		}
	}
	{
		const prefix string = ",\"contributors\":"
		out.RawString(prefix)
		if m, ok := in.Contributors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Contributors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Contributors))
		}
	}
	{
		const prefix string = ",\"retweeted_status\":"
		out.RawString(prefix)
		if in.RetweeetedStatus == nil {
			out.RawString("null")
		} else {
			(*in.RetweeetedStatus).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"retweet_count\":"
		out.RawString(prefix)
		out.Int(int(in.RetweetCount))
	}
	{
		const prefix string = ",\"favorite_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavoriteCount))
	}
	if true {
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		(in.Entities).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"favorited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorited))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"possibly_sensitive\":"
		out.RawString(prefix)
		out.Bool(bool(in.PossiblySensitive))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v twitterStatusEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v twitterStatusEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *twitterStatusEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *twitterStatusEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest2(l, v)
}
func easyjsonC5a4559bDecode(in *jlexer.Lexer, out *struct {
	ResultType      string `json:"result_type"`
	IsoLanguageCode string `json:"iso_language_code"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result_type":
			out.ResultType = string(in.String())
		case "iso_language_code":
			out.IsoLanguageCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode(out *jwriter.Writer, in struct {
	ResultType      string `json:"result_type"`
	IsoLanguageCode string `json:"iso_language_code"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ResultType))
	}
	{
		const prefix string = ",\"iso_language_code\":"
		out.RawString(prefix)
		out.String(string(in.IsoLanguageCode))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeTest3(in *jlexer.Lexer, out *twitterRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.Statuses = nil
			} else {
				in.Delim('[')
				if out.Statuses == nil {
					if !in.IsDelim(']') {
						out.Statuses = make([]twitterStatusEasyJSON, 0, 0)
					} else {
						out.Statuses = []twitterStatusEasyJSON{}
					}
				} else {
					out.Statuses = (out.Statuses)[:0]
				}
				for !in.IsDelim(']') {
					var v7 twitterStatusEasyJSON
					(v7).UnmarshalEasyJSON(in)
					out.Statuses = append(out.Statuses, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "search_metadata":
			easyjsonC5a4559bDecode1(in, &out.SearchMetadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest3(out *jwriter.Writer, in twitterRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix[1:])
		if in.Statuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Statuses {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"search_metadata\":"
		out.RawString(prefix)
		easyjsonC5a4559bEncode1(out, in.SearchMetadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v twitterRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v twitterRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *twitterRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *twitterRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest3(l, v)
}
func easyjsonC5a4559bDecode1(in *jlexer.Lexer, out *struct {
	CompletedIn float64 `json:"completed_in"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    int64   `json:"max_id_str,string"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	Count       int     `json:"count"`
	SinceID     int     `json:"since_id"`
	SinceIDStr  int     `json:"since_id_str,string"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completed_in":
			out.CompletedIn = float64(in.Float64())
		case "max_id":
			out.MaxID = int64(in.Int64())
		case "max_id_str":
			out.MaxIDStr = int64(in.Int64Str())
		case "next_results":
			out.NextResults = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "refresh_url":
			out.RefreshURL = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "since_id":
			out.SinceID = int(in.Int())
		case "since_id_str":
			out.SinceIDStr = int(in.IntStr())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode1(out *jwriter.Writer, in struct {
	CompletedIn float64 `json:"completed_in"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    int64   `json:"max_id_str,string"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	Count       int     `json:"count"`
	SinceID     int     `json:"since_id"`
	SinceIDStr  int     `json:"since_id_str,string"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completed_in\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CompletedIn))
	}
	{
		const prefix string = ",\"max_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxID))
	}
	{
		const prefix string = ",\"max_id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.MaxIDStr))
	}
	{
		const prefix string = ",\"next_results\":"
		out.RawString(prefix)
		out.String(string(in.NextResults))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"refresh_url\":"
		out.RawString(prefix)
		out.String(string(in.RefreshURL))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"since_id\":"
		out.RawString(prefix)
		out.Int(int(in.SinceID))
	}
	{
		const prefix string = ",\"since_id_str\":"
		out.RawString(prefix)
		out.IntStr(int(in.SinceIDStr))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeTest4(in *jlexer.Lexer, out *twitterEntitiesEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashtags":
			if in.IsNull() {
				in.Skip()
				out.Hashtags = nil
			} else {
				in.Delim('[')
				if out.Hashtags == nil {
					if !in.IsDelim(']') {
						out.Hashtags = make([]interface{}, 0, 4)
					} else {
						out.Hashtags = []interface{}{}
					}
				} else {
					out.Hashtags = (out.Hashtags)[:0]
				}
				for !in.IsDelim(']') {
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					out.Hashtags = append(out.Hashtags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]interface{}, 0, 4)
					} else {
						out.Symbols = []interface{}{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v11 interface{}
					if m, ok := v11.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v11.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v11 = in.Interface()
					}
					out.Symbols = append(out.Symbols, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(twitterURLEasyJSON)
				}
				(*out.URL).UnmarshalEasyJSON(in)
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]twitterURLEasyJSON, 0, 0)
					} else {
						out.URLs = []twitterURLEasyJSON{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v12 twitterURLEasyJSON
					(v12).UnmarshalEasyJSON(in)
					out.URLs = append(out.URLs, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_mentions":
			if in.IsNull() {
				in.Skip()
				out.UserMentions = nil
			} else {
				in.Delim('[')
				if out.UserMentions == nil {
					if !in.IsDelim(']') {
						out.UserMentions = make([]struct {
							ScreenName string `json:"screen_name"`
							Name       string `json:"name"`
							ID         int64  `json:"id"`
							IDStr      int64  `json:"id_str,string"`
							Indices    []int  `json:"indices"`
						}, 0, 0)
					} else {
						out.UserMentions = []struct {
							ScreenName string `json:"screen_name"`
							Name       string `json:"name"`
							ID         int64  `json:"id"`
							IDStr      int64  `json:"id_str,string"`
							Indices    []int  `json:"indices"`
						}{}
					}
				} else {
					out.UserMentions = (out.UserMentions)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						ScreenName string `json:"screen_name"`
						Name       string `json:"name"`
						ID         int64  `json:"id"`
						IDStr      int64  `json:"id_str,string"`
						Indices    []int  `json:"indices"`
					}
					easyjsonC5a4559bDecode2(in, &v13)
					out.UserMentions = append(out.UserMentions, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			easyjsonC5a4559bDecode3(in, &out.Description)
		case "media":
			if in.IsNull() {
				in.Skip()
				out.Media = nil
			} else {
				in.Delim('[')
				if out.Media == nil {
					if !in.IsDelim(']') {
						out.Media = make([]struct {
							ID            int64  `json:"id"`
							IDStr         string `json:"id_str"`
							Indices       []int  `json:"indices"`
							MediaURL      string `json:"media_url"`
							MediaURLHTTPS string `json:"media_url_https"`
							URL           string `json:"url"`
							DisplayURL    string `json:"display_url"`
							ExpandedURL   string `json:"expanded_url"`
							Type          string `json:"type"`
							Sizes         map[string]struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"sizes"`
							SourceStatusID    int64 `json:"source_status_id"`
							SourceStatusIDStr int64 `json:"source_status_id_str,string"`
						}, 0, 0)
					} else {
						out.Media = []struct {
							ID            int64  `json:"id"`
							IDStr         string `json:"id_str"`
							Indices       []int  `json:"indices"`
							MediaURL      string `json:"media_url"`
							MediaURLHTTPS string `json:"media_url_https"`
							URL           string `json:"url"`
							DisplayURL    string `json:"display_url"`
							ExpandedURL   string `json:"expanded_url"`
							Type          string `json:"type"`
							Sizes         map[string]struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"sizes"`
							SourceStatusID    int64 `json:"source_status_id"`
							SourceStatusIDStr int64 `json:"source_status_id_str,string"`
						}{}
					}
				} else {
					out.Media = (out.Media)[:0]
				}
				for !in.IsDelim(']') {
					var v14 struct {
						ID            int64  `json:"id"`
						IDStr         string `json:"id_str"`
						Indices       []int  `json:"indices"`
						MediaURL      string `json:"media_url"`
						MediaURLHTTPS string `json:"media_url_https"`
						URL           string `json:"url"`
						DisplayURL    string `json:"display_url"`
						ExpandedURL   string `json:"expanded_url"`
						Type          string `json:"type"`
						Sizes         map[string]struct {
							W      int    `json:"w"`
							H      int    `json:"h"`
							Resize string `json:"resize"`
						} `json:"sizes"`
						SourceStatusID    int64 `json:"source_status_id"`
						SourceStatusIDStr int64 `json:"source_status_id_str,string"`
					}
					easyjsonC5a4559bDecode4(in, &v14)
					out.Media = append(out.Media, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest4(out *jwriter.Writer, in twitterEntitiesEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix[1:])
		if in.Hashtags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Hashtags {
				if v15 > 0 {
					out.RawByte(',')
				}
				if m, ok := v16.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v16.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v16))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Symbols {
				if v17 > 0 {
					out.RawByte(',')
				}
				if m, ok := v18.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		if in.URL == nil {
			out.RawString("null")
		} else {
			(*in.URL).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.URLs {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_mentions\":"
		out.RawString(prefix)
		if in.UserMentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.UserMentions {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode2(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		easyjsonC5a4559bEncode3(out, in.Description)
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		if in.Media == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Media {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode4(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v twitterEntitiesEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v twitterEntitiesEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *twitterEntitiesEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *twitterEntitiesEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest4(l, v)
}
func easyjsonC5a4559bDecode4(in *jlexer.Lexer, out *struct {
	ID            int64  `json:"id"`
	IDStr         string `json:"id_str"`
	Indices       []int  `json:"indices"`
	MediaURL      string `json:"media_url"`
	MediaURLHTTPS string `json:"media_url_https"`
	URL           string `json:"url"`
	DisplayURL    string `json:"display_url"`
	ExpandedURL   string `json:"expanded_url"`
	Type          string `json:"type"`
	Sizes         map[string]struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"sizes"`
	SourceStatusID    int64 `json:"source_status_id"`
	SourceStatusIDStr int64 `json:"source_status_id_str,string"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int
					v25 = int(in.Int())
					out.Indices = append(out.Indices, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "media_url":
			out.MediaURL = string(in.String())
		case "media_url_https":
			out.MediaURLHTTPS = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "display_url":
			out.DisplayURL = string(in.String())
		case "expanded_url":
			out.ExpandedURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "sizes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Sizes = make(map[string]struct {
					W      int    `json:"w"`
					H      int    `json:"h"`
					Resize string `json:"resize"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 struct {
						W      int    `json:"w"`
						H      int    `json:"h"`
						Resize string `json:"resize"`
					}
					easyjsonC5a4559bDecode5(in, &v26)
					(out.Sizes)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "source_status_id":
			out.SourceStatusID = int64(in.Int64())
		case "source_status_id_str":
			out.SourceStatusIDStr = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode4(out *jwriter.Writer, in struct {
	ID            int64  `json:"id"`
	IDStr         string `json:"id_str"`
	Indices       []int  `json:"indices"`
	MediaURL      string `json:"media_url"`
	MediaURLHTTPS string `json:"media_url_https"`
	URL           string `json:"url"`
	DisplayURL    string `json:"display_url"`
	ExpandedURL   string `json:"expanded_url"`
	Type          string `json:"type"`
	Sizes         map[string]struct {
		W      int    `json:"w"`
		H      int    `json:"h"`
		Resize string `json:"resize"`
	} `json:"sizes"`
	SourceStatusID    int64 `json:"source_status_id"`
	SourceStatusIDStr int64 `json:"source_status_id_str,string"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Indices {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"media_url\":"
		out.RawString(prefix)
		out.String(string(in.MediaURL))
	}
	{
		const prefix string = ",\"media_url_https\":"
		out.RawString(prefix)
		out.String(string(in.MediaURLHTTPS))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"display_url\":"
		out.RawString(prefix)
		out.String(string(in.DisplayURL))
	}
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix)
		out.String(string(in.ExpandedURL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		if in.Sizes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.Sizes {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				easyjsonC5a4559bEncode5(out, v29Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"source_status_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.SourceStatusID))
	}
	{
		const prefix string = ",\"source_status_id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.SourceStatusIDStr))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode5(in *jlexer.Lexer, out *struct {
	W      int    `json:"w"`
	H      int    `json:"h"`
	Resize string `json:"resize"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "resize":
			out.Resize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode5(out *jwriter.Writer, in struct {
	W      int    `json:"w"`
	H      int    `json:"h"`
	Resize string `json:"resize"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix[1:])
		out.Int(int(in.W))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.H))
	}
	{
		const prefix string = ",\"resize\":"
		out.RawString(prefix)
		out.String(string(in.Resize))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode3(in *jlexer.Lexer, out *struct {
	URLs []twitterURLEasyJSON `json:"urls"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]twitterURLEasyJSON, 0, 0)
					} else {
						out.URLs = []twitterURLEasyJSON{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v30 twitterURLEasyJSON
					(v30).UnmarshalEasyJSON(in)
					out.URLs = append(out.URLs, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode3(out *jwriter.Writer, in struct {
	URLs []twitterURLEasyJSON `json:"urls"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.URLs {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode2(in *jlexer.Lexer, out *struct {
	ScreenName string `json:"screen_name"`
	Name       string `json:"name"`
	ID         int64  `json:"id"`
	IDStr      int64  `json:"id_str,string"`
	Indices    []int  `json:"indices"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "screen_name":
			out.ScreenName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = int64(in.Int64Str())
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v33 int
					v33 = int(in.Int())
					out.Indices = append(out.Indices, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode2(out *jwriter.Writer, in struct {
	ScreenName string `json:"screen_name"`
	Name       string `json:"name"`
	ID         int64  `json:"id"`
	IDStr      int64  `json:"id_str,string"`
	Indices    []int  `json:"indices"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.IDStr))
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Indices {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeTest5(in *jlexer.Lexer, out *syntheaRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entry":
			if in.IsNull() {
				in.Skip()
				out.Entry = nil
			} else {
				in.Delim('[')
				if out.Entry == nil {
					if !in.IsDelim(']') {
						out.Entry = make([]struct {
							FullURL string `json:"fullUrl"`
							Request *struct {
								Method string `json:"method"`
								URL    string `json:"url"`
							} `json:"request"`
							Resource *struct {
								AbatementDateTime time.Time           `json:"abatementDateTime"`
								AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
								Active            bool                `json:"active"`
								Activity          []struct {
									Detail *struct {
										Code     syntheaCodeEasyJSON      `json:"code"`
										Location syntheaReferenceEasyJSON `json:"location"`
										Status   string                   `json:"status"`
									} `json:"detail"`
								} `json:"activity"`
								Address        []syntheaAddressEasyJSON   `json:"address"`
								Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
								AuthoredOn     time.Time                  `json:"authoredOn"`
								BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
								BirthDate      string                     `json:"birthDate"`
								CareTeam       []struct {
									Provider  syntheaReferenceEasyJSON `json:"provider"`
									Reference string                   `json:"reference"`
									Role      syntheaCodeEasyJSON      `json:"role"`
									Sequence  int64                    `json:"sequence"`
								} `json:"careTeam"`
								Category       []syntheaCodeEasyJSON    `json:"category"`
								Claim          syntheaReferenceEasyJSON `json:"claim"`
								Class          syntheaCodingEasyJSON    `json:"class"`
								ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
								Code           syntheaCodeEasyJSON      `json:"code"`
								Communication  []struct {
									Language syntheaCodeEasyJSON `json:"language"`
								} `json:"communication"`
								Component []struct {
									Code          syntheaCodeEasyJSON   `json:"code"`
									ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
								} `json:"component"`
								Contained []struct {
									Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
									ID           string                     `json:"id"`
									Intent       string                     `json:"intent"`
									Payor        []syntheaReferenceEasyJSON `json:"payor"`
									Performer    []syntheaReferenceEasyJSON `json:"performer"`
									Requester    syntheaReferenceEasyJSON   `json:"requester"`
									ResourceType string                     `json:"resourceType"`
									Status       string                     `json:"status"`
									Subject      syntheaReferenceEasyJSON   `json:"subject"`
									Type         syntheaCodeEasyJSON        `json:"type"`
								} `json:"contained"`
								Created          time.Time           `json:"created"`
								DeceasedDateTime time.Time           `json:"deceasedDateTime"`
								Description      syntheaCodeEasyJSON `json:"description"`
								Diagnosis        []struct {
									DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
									Sequence           int64                    `json:"sequence"`
									Type               []syntheaCodeEasyJSON    `json:"type"`
								} `json:"diagnosis"`
								DosageInstruction []struct {
									AsNeededBoolean bool `json:"asNeededBoolean"`
									DoseAndRate     []struct {
										DoseQuantity *struct {
											Value float64 `json:"value"`
										} `json:"doseQuantity"`
										Type syntheaCodeEasyJSON `json:"type"`
									} `json:"doseAndRate"`
									Sequence int64 `json:"sequence"`
									Timing   *struct {
										Repeat *struct {
											Frequency  int64   `json:"frequency"`
											Period     float64 `json:"period"`
											PeriodUnit string  `json:"periodUnit"`
										} `json:"repeat"`
									} `json:"timing"`
								} `json:"dosageInstruction"`
								EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
								Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
								Extension         []syntheaExtensionEasyJSON `json:"extension"`
								Gender            string                     `json:"gender"`
								Goal              []syntheaReferenceEasyJSON `json:"goal"`
								ID                string                     `json:"id"`
								Identifier        []struct {
									System string              `json:"system"`
									Type   syntheaCodeEasyJSON `json:"type"`
									Use    string              `json:"use"`
									Value  string              `json:"value"`
								} `json:"identifier"`
								Insurance []struct {
									Coverage syntheaReferenceEasyJSON `json:"coverage"`
									Focal    bool                     `json:"focal"`
									Sequence int64                    `json:"sequence"`
								} `json:"insurance"`
								Insurer syntheaReferenceEasyJSON `json:"insurer"`
								Intent  string                   `json:"intent"`
								Issued  time.Time                `json:"issued"`
								Item    []struct {
									Adjudication []struct {
										Amount   syntheaCurrencyEasyJSON `json:"amount"`
										Category syntheaCodeEasyJSON     `json:"category"`
									} `json:"adjudication"`
									Category                syntheaCodeEasyJSON        `json:"category"`
									DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
									Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
									InformationSequence     []int64                    `json:"informationSequence"`
									LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
									Net                     syntheaCurrencyEasyJSON    `json:"net"`
									ProcedureSequence       []int64                    `json:"procedureSequence"`
									ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
									Sequence                int64                      `json:"sequence"`
									ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
								} `json:"item"`
								LifecycleStatus           string                     `json:"lifecycleStatus"`
								ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
								MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
								MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
								MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
								Name                      jsontext.Value             `json:"name"`
								NumberOfInstances         int64                      `json:"numberOfInstances"`
								NumberOfSeries            int64                      `json:"numberOfSeries"`
								OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
								OnsetDateTime             time.Time                  `json:"onsetDateTime"`
								Outcome                   string                     `json:"outcome"`
								Participant               []struct {
									Individual syntheaReferenceEasyJSON `json:"individual"`
									Member     syntheaReferenceEasyJSON `json:"member"`
									Role       []syntheaCodeEasyJSON    `json:"role"`
								} `json:"participant"`
								Patient syntheaReferenceEasyJSON `json:"patient"`
								Payment *struct {
									Amount syntheaCurrencyEasyJSON `json:"amount"`
								} `json:"payment"`
								PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
								Period          syntheaRangeEasyJSON     `json:"period"`
								Prescription    syntheaReferenceEasyJSON `json:"prescription"`
								PrimarySource   bool                     `json:"primarySource"`
								Priority        syntheaCodeEasyJSON      `json:"priority"`
								Procedure       []struct {
									ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
									Sequence           int64                    `json:"sequence"`
								} `json:"procedure"`
								Provider        syntheaReferenceEasyJSON   `json:"provider"`
								ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
								ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
								RecordedDate    time.Time                  `json:"recordedDate"`
								Referral        syntheaReferenceEasyJSON   `json:"referral"`
								Requester       syntheaReferenceEasyJSON   `json:"requester"`
								ResourceType    string                     `json:"resourceType"`
								Result          []syntheaReferenceEasyJSON `json:"result"`
								Series          []struct {
									BodySite syntheaCodingEasyJSON `json:"bodySite"`
									Instance []struct {
										Number   int64                 `json:"number"`
										SopClass syntheaCodingEasyJSON `json:"sopClass"`
										Title    string                `json:"title"`
										UID      string                `json:"uid"`
									} `json:"instance"`
									Modality          syntheaCodingEasyJSON `json:"modality"`
									Number            int64                 `json:"number"`
									NumberOfInstances int64                 `json:"numberOfInstances"`
									Started           string                `json:"started"`
									UID               string                `json:"uid"`
								} `json:"series"`
								ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
								Started         time.Time                `json:"started"`
								Status          string                   `json:"status"`
								Subject         syntheaReferenceEasyJSON `json:"subject"`
								SupportingInfo  []struct {
									Category       syntheaCodeEasyJSON      `json:"category"`
									Sequence       int64                    `json:"sequence"`
									ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
								} `json:"supportingInfo"`
								Telecom              []map[string]string   `json:"telecom"`
								Text                 map[string]string     `json:"text"`
								Total                jsontext.Value        `json:"total"`
								Type                 jsontext.Value        `json:"type"`
								Use                  string                `json:"use"`
								VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
								ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
								ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
								VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
							} `json:"resource"`
						}, 0, 2)
					} else {
						out.Entry = []struct {
							FullURL string `json:"fullUrl"`
							Request *struct {
								Method string `json:"method"`
								URL    string `json:"url"`
							} `json:"request"`
							Resource *struct {
								AbatementDateTime time.Time           `json:"abatementDateTime"`
								AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
								Active            bool                `json:"active"`
								Activity          []struct {
									Detail *struct {
										Code     syntheaCodeEasyJSON      `json:"code"`
										Location syntheaReferenceEasyJSON `json:"location"`
										Status   string                   `json:"status"`
									} `json:"detail"`
								} `json:"activity"`
								Address        []syntheaAddressEasyJSON   `json:"address"`
								Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
								AuthoredOn     time.Time                  `json:"authoredOn"`
								BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
								BirthDate      string                     `json:"birthDate"`
								CareTeam       []struct {
									Provider  syntheaReferenceEasyJSON `json:"provider"`
									Reference string                   `json:"reference"`
									Role      syntheaCodeEasyJSON      `json:"role"`
									Sequence  int64                    `json:"sequence"`
								} `json:"careTeam"`
								Category       []syntheaCodeEasyJSON    `json:"category"`
								Claim          syntheaReferenceEasyJSON `json:"claim"`
								Class          syntheaCodingEasyJSON    `json:"class"`
								ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
								Code           syntheaCodeEasyJSON      `json:"code"`
								Communication  []struct {
									Language syntheaCodeEasyJSON `json:"language"`
								} `json:"communication"`
								Component []struct {
									Code          syntheaCodeEasyJSON   `json:"code"`
									ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
								} `json:"component"`
								Contained []struct {
									Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
									ID           string                     `json:"id"`
									Intent       string                     `json:"intent"`
									Payor        []syntheaReferenceEasyJSON `json:"payor"`
									Performer    []syntheaReferenceEasyJSON `json:"performer"`
									Requester    syntheaReferenceEasyJSON   `json:"requester"`
									ResourceType string                     `json:"resourceType"`
									Status       string                     `json:"status"`
									Subject      syntheaReferenceEasyJSON   `json:"subject"`
									Type         syntheaCodeEasyJSON        `json:"type"`
								} `json:"contained"`
								Created          time.Time           `json:"created"`
								DeceasedDateTime time.Time           `json:"deceasedDateTime"`
								Description      syntheaCodeEasyJSON `json:"description"`
								Diagnosis        []struct {
									DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
									Sequence           int64                    `json:"sequence"`
									Type               []syntheaCodeEasyJSON    `json:"type"`
								} `json:"diagnosis"`
								DosageInstruction []struct {
									AsNeededBoolean bool `json:"asNeededBoolean"`
									DoseAndRate     []struct {
										DoseQuantity *struct {
											Value float64 `json:"value"`
										} `json:"doseQuantity"`
										Type syntheaCodeEasyJSON `json:"type"`
									} `json:"doseAndRate"`
									Sequence int64 `json:"sequence"`
									Timing   *struct {
										Repeat *struct {
											Frequency  int64   `json:"frequency"`
											Period     float64 `json:"period"`
											PeriodUnit string  `json:"periodUnit"`
										} `json:"repeat"`
									} `json:"timing"`
								} `json:"dosageInstruction"`
								EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
								Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
								Extension         []syntheaExtensionEasyJSON `json:"extension"`
								Gender            string                     `json:"gender"`
								Goal              []syntheaReferenceEasyJSON `json:"goal"`
								ID                string                     `json:"id"`
								Identifier        []struct {
									System string              `json:"system"`
									Type   syntheaCodeEasyJSON `json:"type"`
									Use    string              `json:"use"`
									Value  string              `json:"value"`
								} `json:"identifier"`
								Insurance []struct {
									Coverage syntheaReferenceEasyJSON `json:"coverage"`
									Focal    bool                     `json:"focal"`
									Sequence int64                    `json:"sequence"`
								} `json:"insurance"`
								Insurer syntheaReferenceEasyJSON `json:"insurer"`
								Intent  string                   `json:"intent"`
								Issued  time.Time                `json:"issued"`
								Item    []struct {
									Adjudication []struct {
										Amount   syntheaCurrencyEasyJSON `json:"amount"`
										Category syntheaCodeEasyJSON     `json:"category"`
									} `json:"adjudication"`
									Category                syntheaCodeEasyJSON        `json:"category"`
									DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
									Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
									InformationSequence     []int64                    `json:"informationSequence"`
									LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
									Net                     syntheaCurrencyEasyJSON    `json:"net"`
									ProcedureSequence       []int64                    `json:"procedureSequence"`
									ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
									Sequence                int64                      `json:"sequence"`
									ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
								} `json:"item"`
								LifecycleStatus           string                     `json:"lifecycleStatus"`
								ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
								MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
								MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
								MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
								Name                      jsontext.Value             `json:"name"`
								NumberOfInstances         int64                      `json:"numberOfInstances"`
								NumberOfSeries            int64                      `json:"numberOfSeries"`
								OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
								OnsetDateTime             time.Time                  `json:"onsetDateTime"`
								Outcome                   string                     `json:"outcome"`
								Participant               []struct {
									Individual syntheaReferenceEasyJSON `json:"individual"`
									Member     syntheaReferenceEasyJSON `json:"member"`
									Role       []syntheaCodeEasyJSON    `json:"role"`
								} `json:"participant"`
								Patient syntheaReferenceEasyJSON `json:"patient"`
								Payment *struct {
									Amount syntheaCurrencyEasyJSON `json:"amount"`
								} `json:"payment"`
								PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
								Period          syntheaRangeEasyJSON     `json:"period"`
								Prescription    syntheaReferenceEasyJSON `json:"prescription"`
								PrimarySource   bool                     `json:"primarySource"`
								Priority        syntheaCodeEasyJSON      `json:"priority"`
								Procedure       []struct {
									ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
									Sequence           int64                    `json:"sequence"`
								} `json:"procedure"`
								Provider        syntheaReferenceEasyJSON   `json:"provider"`
								ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
								ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
								RecordedDate    time.Time                  `json:"recordedDate"`
								Referral        syntheaReferenceEasyJSON   `json:"referral"`
								Requester       syntheaReferenceEasyJSON   `json:"requester"`
								ResourceType    string                     `json:"resourceType"`
								Result          []syntheaReferenceEasyJSON `json:"result"`
								Series          []struct {
									BodySite syntheaCodingEasyJSON `json:"bodySite"`
									Instance []struct {
										Number   int64                 `json:"number"`
										SopClass syntheaCodingEasyJSON `json:"sopClass"`
										Title    string                `json:"title"`
										UID      string                `json:"uid"`
									} `json:"instance"`
									Modality          syntheaCodingEasyJSON `json:"modality"`
									Number            int64                 `json:"number"`
									NumberOfInstances int64                 `json:"numberOfInstances"`
									Started           string                `json:"started"`
									UID               string                `json:"uid"`
								} `json:"series"`
								ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
								Started         time.Time                `json:"started"`
								Status          string                   `json:"status"`
								Subject         syntheaReferenceEasyJSON `json:"subject"`
								SupportingInfo  []struct {
									Category       syntheaCodeEasyJSON      `json:"category"`
									Sequence       int64                    `json:"sequence"`
									ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
								} `json:"supportingInfo"`
								Telecom              []map[string]string   `json:"telecom"`
								Text                 map[string]string     `json:"text"`
								Total                jsontext.Value        `json:"total"`
								Type                 jsontext.Value        `json:"type"`
								Use                  string                `json:"use"`
								VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
								ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
								ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
								VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
							} `json:"resource"`
						}{}
					}
				} else {
					out.Entry = (out.Entry)[:0]
				}
				for !in.IsDelim(']') {
					var v36 struct {
						FullURL string `json:"fullUrl"`
						Request *struct {
							Method string `json:"method"`
							URL    string `json:"url"`
						} `json:"request"`
						Resource *struct {
							AbatementDateTime time.Time           `json:"abatementDateTime"`
							AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
							Active            bool                `json:"active"`
							Activity          []struct {
								Detail *struct {
									Code     syntheaCodeEasyJSON      `json:"code"`
									Location syntheaReferenceEasyJSON `json:"location"`
									Status   string                   `json:"status"`
								} `json:"detail"`
							} `json:"activity"`
							Address        []syntheaAddressEasyJSON   `json:"address"`
							Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
							AuthoredOn     time.Time                  `json:"authoredOn"`
							BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
							BirthDate      string                     `json:"birthDate"`
							CareTeam       []struct {
								Provider  syntheaReferenceEasyJSON `json:"provider"`
								Reference string                   `json:"reference"`
								Role      syntheaCodeEasyJSON      `json:"role"`
								Sequence  int64                    `json:"sequence"`
							} `json:"careTeam"`
							Category       []syntheaCodeEasyJSON    `json:"category"`
							Claim          syntheaReferenceEasyJSON `json:"claim"`
							Class          syntheaCodingEasyJSON    `json:"class"`
							ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
							Code           syntheaCodeEasyJSON      `json:"code"`
							Communication  []struct {
								Language syntheaCodeEasyJSON `json:"language"`
							} `json:"communication"`
							Component []struct {
								Code          syntheaCodeEasyJSON   `json:"code"`
								ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
							} `json:"component"`
							Contained []struct {
								Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
								ID           string                     `json:"id"`
								Intent       string                     `json:"intent"`
								Payor        []syntheaReferenceEasyJSON `json:"payor"`
								Performer    []syntheaReferenceEasyJSON `json:"performer"`
								Requester    syntheaReferenceEasyJSON   `json:"requester"`
								ResourceType string                     `json:"resourceType"`
								Status       string                     `json:"status"`
								Subject      syntheaReferenceEasyJSON   `json:"subject"`
								Type         syntheaCodeEasyJSON        `json:"type"`
							} `json:"contained"`
							Created          time.Time           `json:"created"`
							DeceasedDateTime time.Time           `json:"deceasedDateTime"`
							Description      syntheaCodeEasyJSON `json:"description"`
							Diagnosis        []struct {
								DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
								Sequence           int64                    `json:"sequence"`
								Type               []syntheaCodeEasyJSON    `json:"type"`
							} `json:"diagnosis"`
							DosageInstruction []struct {
								AsNeededBoolean bool `json:"asNeededBoolean"`
								DoseAndRate     []struct {
									DoseQuantity *struct {
										Value float64 `json:"value"`
									} `json:"doseQuantity"`
									Type syntheaCodeEasyJSON `json:"type"`
								} `json:"doseAndRate"`
								Sequence int64 `json:"sequence"`
								Timing   *struct {
									Repeat *struct {
										Frequency  int64   `json:"frequency"`
										Period     float64 `json:"period"`
										PeriodUnit string  `json:"periodUnit"`
									} `json:"repeat"`
								} `json:"timing"`
							} `json:"dosageInstruction"`
							EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
							Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
							Extension         []syntheaExtensionEasyJSON `json:"extension"`
							Gender            string                     `json:"gender"`
							Goal              []syntheaReferenceEasyJSON `json:"goal"`
							ID                string                     `json:"id"`
							Identifier        []struct {
								System string              `json:"system"`
								Type   syntheaCodeEasyJSON `json:"type"`
								Use    string              `json:"use"`
								Value  string              `json:"value"`
							} `json:"identifier"`
							Insurance []struct {
								Coverage syntheaReferenceEasyJSON `json:"coverage"`
								Focal    bool                     `json:"focal"`
								Sequence int64                    `json:"sequence"`
							} `json:"insurance"`
							Insurer syntheaReferenceEasyJSON `json:"insurer"`
							Intent  string                   `json:"intent"`
							Issued  time.Time                `json:"issued"`
							Item    []struct {
								Adjudication []struct {
									Amount   syntheaCurrencyEasyJSON `json:"amount"`
									Category syntheaCodeEasyJSON     `json:"category"`
								} `json:"adjudication"`
								Category                syntheaCodeEasyJSON        `json:"category"`
								DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
								Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
								InformationSequence     []int64                    `json:"informationSequence"`
								LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
								Net                     syntheaCurrencyEasyJSON    `json:"net"`
								ProcedureSequence       []int64                    `json:"procedureSequence"`
								ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
								Sequence                int64                      `json:"sequence"`
								ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
							} `json:"item"`
							LifecycleStatus           string                     `json:"lifecycleStatus"`
							ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
							MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
							MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
							MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
							Name                      jsontext.Value             `json:"name"`
							NumberOfInstances         int64                      `json:"numberOfInstances"`
							NumberOfSeries            int64                      `json:"numberOfSeries"`
							OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
							OnsetDateTime             time.Time                  `json:"onsetDateTime"`
							Outcome                   string                     `json:"outcome"`
							Participant               []struct {
								Individual syntheaReferenceEasyJSON `json:"individual"`
								Member     syntheaReferenceEasyJSON `json:"member"`
								Role       []syntheaCodeEasyJSON    `json:"role"`
							} `json:"participant"`
							Patient syntheaReferenceEasyJSON `json:"patient"`
							Payment *struct {
								Amount syntheaCurrencyEasyJSON `json:"amount"`
							} `json:"payment"`
							PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
							Period          syntheaRangeEasyJSON     `json:"period"`
							Prescription    syntheaReferenceEasyJSON `json:"prescription"`
							PrimarySource   bool                     `json:"primarySource"`
							Priority        syntheaCodeEasyJSON      `json:"priority"`
							Procedure       []struct {
								ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
								Sequence           int64                    `json:"sequence"`
							} `json:"procedure"`
							Provider        syntheaReferenceEasyJSON   `json:"provider"`
							ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
							ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
							RecordedDate    time.Time                  `json:"recordedDate"`
							Referral        syntheaReferenceEasyJSON   `json:"referral"`
							Requester       syntheaReferenceEasyJSON   `json:"requester"`
							ResourceType    string                     `json:"resourceType"`
							Result          []syntheaReferenceEasyJSON `json:"result"`
							Series          []struct {
								BodySite syntheaCodingEasyJSON `json:"bodySite"`
								Instance []struct {
									Number   int64                 `json:"number"`
									SopClass syntheaCodingEasyJSON `json:"sopClass"`
									Title    string                `json:"title"`
									UID      string                `json:"uid"`
								} `json:"instance"`
								Modality          syntheaCodingEasyJSON `json:"modality"`
								Number            int64                 `json:"number"`
								NumberOfInstances int64                 `json:"numberOfInstances"`
								Started           string                `json:"started"`
								UID               string                `json:"uid"`
							} `json:"series"`
							ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
							Started         time.Time                `json:"started"`
							Status          string                   `json:"status"`
							Subject         syntheaReferenceEasyJSON `json:"subject"`
							SupportingInfo  []struct {
								Category       syntheaCodeEasyJSON      `json:"category"`
								Sequence       int64                    `json:"sequence"`
								ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
							} `json:"supportingInfo"`
							Telecom              []map[string]string   `json:"telecom"`
							Text                 map[string]string     `json:"text"`
							Total                jsontext.Value        `json:"total"`
							Type                 jsontext.Value        `json:"type"`
							Use                  string                `json:"use"`
							VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
							ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
							ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
							VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
						} `json:"resource"`
					}
					easyjsonC5a4559bDecode6(in, &v36)
					out.Entry = append(out.Entry, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourceType":
			out.ResourceType = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest5(out *jwriter.Writer, in syntheaRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"entry\":"
		out.RawString(prefix[1:])
		if in.Entry == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Entry {
				if v37 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode6(out, v38)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"resourceType\":"
		out.RawString(prefix)
		out.String(string(in.ResourceType))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest5(l, v)
}
func easyjsonC5a4559bDecode6(in *jlexer.Lexer, out *struct {
	FullURL string `json:"fullUrl"`
	Request *struct {
		Method string `json:"method"`
		URL    string `json:"url"`
	} `json:"request"`
	Resource *struct {
		AbatementDateTime time.Time           `json:"abatementDateTime"`
		AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
		Active            bool                `json:"active"`
		Activity          []struct {
			Detail *struct {
				Code     syntheaCodeEasyJSON      `json:"code"`
				Location syntheaReferenceEasyJSON `json:"location"`
				Status   string                   `json:"status"`
			} `json:"detail"`
		} `json:"activity"`
		Address        []syntheaAddressEasyJSON   `json:"address"`
		Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
		AuthoredOn     time.Time                  `json:"authoredOn"`
		BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
		BirthDate      string                     `json:"birthDate"`
		CareTeam       []struct {
			Provider  syntheaReferenceEasyJSON `json:"provider"`
			Reference string                   `json:"reference"`
			Role      syntheaCodeEasyJSON      `json:"role"`
			Sequence  int64                    `json:"sequence"`
		} `json:"careTeam"`
		Category       []syntheaCodeEasyJSON    `json:"category"`
		Claim          syntheaReferenceEasyJSON `json:"claim"`
		Class          syntheaCodingEasyJSON    `json:"class"`
		ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
		Code           syntheaCodeEasyJSON      `json:"code"`
		Communication  []struct {
			Language syntheaCodeEasyJSON `json:"language"`
		} `json:"communication"`
		Component []struct {
			Code          syntheaCodeEasyJSON   `json:"code"`
			ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
		} `json:"component"`
		Contained []struct {
			Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
			ID           string                     `json:"id"`
			Intent       string                     `json:"intent"`
			Payor        []syntheaReferenceEasyJSON `json:"payor"`
			Performer    []syntheaReferenceEasyJSON `json:"performer"`
			Requester    syntheaReferenceEasyJSON   `json:"requester"`
			ResourceType string                     `json:"resourceType"`
			Status       string                     `json:"status"`
			Subject      syntheaReferenceEasyJSON   `json:"subject"`
			Type         syntheaCodeEasyJSON        `json:"type"`
		} `json:"contained"`
		Created          time.Time           `json:"created"`
		DeceasedDateTime time.Time           `json:"deceasedDateTime"`
		Description      syntheaCodeEasyJSON `json:"description"`
		Diagnosis        []struct {
			DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
			Sequence           int64                    `json:"sequence"`
			Type               []syntheaCodeEasyJSON    `json:"type"`
		} `json:"diagnosis"`
		DosageInstruction []struct {
			AsNeededBoolean bool `json:"asNeededBoolean"`
			DoseAndRate     []struct {
				DoseQuantity *struct {
					Value float64 `json:"value"`
				} `json:"doseQuantity"`
				Type syntheaCodeEasyJSON `json:"type"`
			} `json:"doseAndRate"`
			Sequence int64 `json:"sequence"`
			Timing   *struct {
				Repeat *struct {
					Frequency  int64   `json:"frequency"`
					Period     float64 `json:"period"`
					PeriodUnit string  `json:"periodUnit"`
				} `json:"repeat"`
			} `json:"timing"`
		} `json:"dosageInstruction"`
		EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
		Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
		Extension         []syntheaExtensionEasyJSON `json:"extension"`
		Gender            string                     `json:"gender"`
		Goal              []syntheaReferenceEasyJSON `json:"goal"`
		ID                string                     `json:"id"`
		Identifier        []struct {
			System string              `json:"system"`
			Type   syntheaCodeEasyJSON `json:"type"`
			Use    string              `json:"use"`
			Value  string              `json:"value"`
		} `json:"identifier"`
		Insurance []struct {
			Coverage syntheaReferenceEasyJSON `json:"coverage"`
			Focal    bool                     `json:"focal"`
			Sequence int64                    `json:"sequence"`
		} `json:"insurance"`
		Insurer syntheaReferenceEasyJSON `json:"insurer"`
		Intent  string                   `json:"intent"`
		Issued  time.Time                `json:"issued"`
		Item    []struct {
			Adjudication []struct {
				Amount   syntheaCurrencyEasyJSON `json:"amount"`
				Category syntheaCodeEasyJSON     `json:"category"`
			} `json:"adjudication"`
			Category                syntheaCodeEasyJSON        `json:"category"`
			DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
			Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
			InformationSequence     []int64                    `json:"informationSequence"`
			LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
			Net                     syntheaCurrencyEasyJSON    `json:"net"`
			ProcedureSequence       []int64                    `json:"procedureSequence"`
			ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
			Sequence                int64                      `json:"sequence"`
			ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
		} `json:"item"`
		LifecycleStatus           string                     `json:"lifecycleStatus"`
		ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
		MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
		MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
		MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
		Name                      jsontext.Value             `json:"name"`
		NumberOfInstances         int64                      `json:"numberOfInstances"`
		NumberOfSeries            int64                      `json:"numberOfSeries"`
		OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
		OnsetDateTime             time.Time                  `json:"onsetDateTime"`
		Outcome                   string                     `json:"outcome"`
		Participant               []struct {
			Individual syntheaReferenceEasyJSON `json:"individual"`
			Member     syntheaReferenceEasyJSON `json:"member"`
			Role       []syntheaCodeEasyJSON    `json:"role"`
		} `json:"participant"`
		Patient syntheaReferenceEasyJSON `json:"patient"`
		Payment *struct {
			Amount syntheaCurrencyEasyJSON `json:"amount"`
		} `json:"payment"`
		PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
		Period          syntheaRangeEasyJSON     `json:"period"`
		Prescription    syntheaReferenceEasyJSON `json:"prescription"`
		PrimarySource   bool                     `json:"primarySource"`
		Priority        syntheaCodeEasyJSON      `json:"priority"`
		Procedure       []struct {
			ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
			Sequence           int64                    `json:"sequence"`
		} `json:"procedure"`
		Provider        syntheaReferenceEasyJSON   `json:"provider"`
		ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
		ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
		RecordedDate    time.Time                  `json:"recordedDate"`
		Referral        syntheaReferenceEasyJSON   `json:"referral"`
		Requester       syntheaReferenceEasyJSON   `json:"requester"`
		ResourceType    string                     `json:"resourceType"`
		Result          []syntheaReferenceEasyJSON `json:"result"`
		Series          []struct {
			BodySite syntheaCodingEasyJSON `json:"bodySite"`
			Instance []struct {
				Number   int64                 `json:"number"`
				SopClass syntheaCodingEasyJSON `json:"sopClass"`
				Title    string                `json:"title"`
				UID      string                `json:"uid"`
			} `json:"instance"`
			Modality          syntheaCodingEasyJSON `json:"modality"`
			Number            int64                 `json:"number"`
			NumberOfInstances int64                 `json:"numberOfInstances"`
			Started           string                `json:"started"`
			UID               string                `json:"uid"`
		} `json:"series"`
		ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
		Started         time.Time                `json:"started"`
		Status          string                   `json:"status"`
		Subject         syntheaReferenceEasyJSON `json:"subject"`
		SupportingInfo  []struct {
			Category       syntheaCodeEasyJSON      `json:"category"`
			Sequence       int64                    `json:"sequence"`
			ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
		} `json:"supportingInfo"`
		Telecom              []map[string]string   `json:"telecom"`
		Text                 map[string]string     `json:"text"`
		Total                jsontext.Value        `json:"total"`
		Type                 jsontext.Value        `json:"type"`
		Use                  string                `json:"use"`
		VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
		ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
		ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
		VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
	} `json:"resource"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullUrl":
			out.FullURL = string(in.String())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(struct {
						Method string `json:"method"`
						URL    string `json:"url"`
					})
				}
				easyjsonC5a4559bDecode7(in, out.Request)
			}
		case "resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				if out.Resource == nil {
					out.Resource = new(struct {
						AbatementDateTime time.Time           `json:"abatementDateTime"`
						AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
						Active            bool                `json:"active"`
						Activity          []struct {
							Detail *struct {
								Code     syntheaCodeEasyJSON      `json:"code"`
								Location syntheaReferenceEasyJSON `json:"location"`
								Status   string                   `json:"status"`
							} `json:"detail"`
						} `json:"activity"`
						Address        []syntheaAddressEasyJSON   `json:"address"`
						Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
						AuthoredOn     time.Time                  `json:"authoredOn"`
						BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
						BirthDate      string                     `json:"birthDate"`
						CareTeam       []struct {
							Provider  syntheaReferenceEasyJSON `json:"provider"`
							Reference string                   `json:"reference"`
							Role      syntheaCodeEasyJSON      `json:"role"`
							Sequence  int64                    `json:"sequence"`
						} `json:"careTeam"`
						Category       []syntheaCodeEasyJSON    `json:"category"`
						Claim          syntheaReferenceEasyJSON `json:"claim"`
						Class          syntheaCodingEasyJSON    `json:"class"`
						ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
						Code           syntheaCodeEasyJSON      `json:"code"`
						Communication  []struct {
							Language syntheaCodeEasyJSON `json:"language"`
						} `json:"communication"`
						Component []struct {
							Code          syntheaCodeEasyJSON   `json:"code"`
							ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
						} `json:"component"`
						Contained []struct {
							Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
							ID           string                     `json:"id"`
							Intent       string                     `json:"intent"`
							Payor        []syntheaReferenceEasyJSON `json:"payor"`
							Performer    []syntheaReferenceEasyJSON `json:"performer"`
							Requester    syntheaReferenceEasyJSON   `json:"requester"`
							ResourceType string                     `json:"resourceType"`
							Status       string                     `json:"status"`
							Subject      syntheaReferenceEasyJSON   `json:"subject"`
							Type         syntheaCodeEasyJSON        `json:"type"`
						} `json:"contained"`
						Created          time.Time           `json:"created"`
						DeceasedDateTime time.Time           `json:"deceasedDateTime"`
						Description      syntheaCodeEasyJSON `json:"description"`
						Diagnosis        []struct {
							DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
							Sequence           int64                    `json:"sequence"`
							Type               []syntheaCodeEasyJSON    `json:"type"`
						} `json:"diagnosis"`
						DosageInstruction []struct {
							AsNeededBoolean bool `json:"asNeededBoolean"`
							DoseAndRate     []struct {
								DoseQuantity *struct {
									Value float64 `json:"value"`
								} `json:"doseQuantity"`
								Type syntheaCodeEasyJSON `json:"type"`
							} `json:"doseAndRate"`
							Sequence int64 `json:"sequence"`
							Timing   *struct {
								Repeat *struct {
									Frequency  int64   `json:"frequency"`
									Period     float64 `json:"period"`
									PeriodUnit string  `json:"periodUnit"`
								} `json:"repeat"`
							} `json:"timing"`
						} `json:"dosageInstruction"`
						EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
						Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
						Extension         []syntheaExtensionEasyJSON `json:"extension"`
						Gender            string                     `json:"gender"`
						Goal              []syntheaReferenceEasyJSON `json:"goal"`
						ID                string                     `json:"id"`
						Identifier        []struct {
							System string              `json:"system"`
							Type   syntheaCodeEasyJSON `json:"type"`
							Use    string              `json:"use"`
							Value  string              `json:"value"`
						} `json:"identifier"`
						Insurance []struct {
							Coverage syntheaReferenceEasyJSON `json:"coverage"`
							Focal    bool                     `json:"focal"`
							Sequence int64                    `json:"sequence"`
						} `json:"insurance"`
						Insurer syntheaReferenceEasyJSON `json:"insurer"`
						Intent  string                   `json:"intent"`
						Issued  time.Time                `json:"issued"`
						Item    []struct {
							Adjudication []struct {
								Amount   syntheaCurrencyEasyJSON `json:"amount"`
								Category syntheaCodeEasyJSON     `json:"category"`
							} `json:"adjudication"`
							Category                syntheaCodeEasyJSON        `json:"category"`
							DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
							Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
							InformationSequence     []int64                    `json:"informationSequence"`
							LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
							Net                     syntheaCurrencyEasyJSON    `json:"net"`
							ProcedureSequence       []int64                    `json:"procedureSequence"`
							ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
							Sequence                int64                      `json:"sequence"`
							ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
						} `json:"item"`
						LifecycleStatus           string                     `json:"lifecycleStatus"`
						ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
						MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
						MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
						MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
						Name                      jsontext.Value             `json:"name"`
						NumberOfInstances         int64                      `json:"numberOfInstances"`
						NumberOfSeries            int64                      `json:"numberOfSeries"`
						OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
						OnsetDateTime             time.Time                  `json:"onsetDateTime"`
						Outcome                   string                     `json:"outcome"`
						Participant               []struct {
							Individual syntheaReferenceEasyJSON `json:"individual"`
							Member     syntheaReferenceEasyJSON `json:"member"`
							Role       []syntheaCodeEasyJSON    `json:"role"`
						} `json:"participant"`
						Patient syntheaReferenceEasyJSON `json:"patient"`
						Payment *struct {
							Amount syntheaCurrencyEasyJSON `json:"amount"`
						} `json:"payment"`
						PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
						Period          syntheaRangeEasyJSON     `json:"period"`
						Prescription    syntheaReferenceEasyJSON `json:"prescription"`
						PrimarySource   bool                     `json:"primarySource"`
						Priority        syntheaCodeEasyJSON      `json:"priority"`
						Procedure       []struct {
							ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
							Sequence           int64                    `json:"sequence"`
						} `json:"procedure"`
						Provider        syntheaReferenceEasyJSON   `json:"provider"`
						ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
						ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
						RecordedDate    time.Time                  `json:"recordedDate"`
						Referral        syntheaReferenceEasyJSON   `json:"referral"`
						Requester       syntheaReferenceEasyJSON   `json:"requester"`
						ResourceType    string                     `json:"resourceType"`
						Result          []syntheaReferenceEasyJSON `json:"result"`
						Series          []struct {
							BodySite syntheaCodingEasyJSON `json:"bodySite"`
							Instance []struct {
								Number   int64                 `json:"number"`
								SopClass syntheaCodingEasyJSON `json:"sopClass"`
								Title    string                `json:"title"`
								UID      string                `json:"uid"`
							} `json:"instance"`
							Modality          syntheaCodingEasyJSON `json:"modality"`
							Number            int64                 `json:"number"`
							NumberOfInstances int64                 `json:"numberOfInstances"`
							Started           string                `json:"started"`
							UID               string                `json:"uid"`
						} `json:"series"`
						ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
						Started         time.Time                `json:"started"`
						Status          string                   `json:"status"`
						Subject         syntheaReferenceEasyJSON `json:"subject"`
						SupportingInfo  []struct {
							Category       syntheaCodeEasyJSON      `json:"category"`
							Sequence       int64                    `json:"sequence"`
							ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
						} `json:"supportingInfo"`
						Telecom              []map[string]string   `json:"telecom"`
						Text                 map[string]string     `json:"text"`
						Total                jsontext.Value        `json:"total"`
						Type                 jsontext.Value        `json:"type"`
						Use                  string                `json:"use"`
						VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
						ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
						ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
						VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
					})
				}
				easyjsonC5a4559bDecode8(in, out.Resource)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode6(out *jwriter.Writer, in struct {
	FullURL string `json:"fullUrl"`
	Request *struct {
		Method string `json:"method"`
		URL    string `json:"url"`
	} `json:"request"`
	Resource *struct {
		AbatementDateTime time.Time           `json:"abatementDateTime"`
		AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
		Active            bool                `json:"active"`
		Activity          []struct {
			Detail *struct {
				Code     syntheaCodeEasyJSON      `json:"code"`
				Location syntheaReferenceEasyJSON `json:"location"`
				Status   string                   `json:"status"`
			} `json:"detail"`
		} `json:"activity"`
		Address        []syntheaAddressEasyJSON   `json:"address"`
		Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
		AuthoredOn     time.Time                  `json:"authoredOn"`
		BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
		BirthDate      string                     `json:"birthDate"`
		CareTeam       []struct {
			Provider  syntheaReferenceEasyJSON `json:"provider"`
			Reference string                   `json:"reference"`
			Role      syntheaCodeEasyJSON      `json:"role"`
			Sequence  int64                    `json:"sequence"`
		} `json:"careTeam"`
		Category       []syntheaCodeEasyJSON    `json:"category"`
		Claim          syntheaReferenceEasyJSON `json:"claim"`
		Class          syntheaCodingEasyJSON    `json:"class"`
		ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
		Code           syntheaCodeEasyJSON      `json:"code"`
		Communication  []struct {
			Language syntheaCodeEasyJSON `json:"language"`
		} `json:"communication"`
		Component []struct {
			Code          syntheaCodeEasyJSON   `json:"code"`
			ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
		} `json:"component"`
		Contained []struct {
			Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
			ID           string                     `json:"id"`
			Intent       string                     `json:"intent"`
			Payor        []syntheaReferenceEasyJSON `json:"payor"`
			Performer    []syntheaReferenceEasyJSON `json:"performer"`
			Requester    syntheaReferenceEasyJSON   `json:"requester"`
			ResourceType string                     `json:"resourceType"`
			Status       string                     `json:"status"`
			Subject      syntheaReferenceEasyJSON   `json:"subject"`
			Type         syntheaCodeEasyJSON        `json:"type"`
		} `json:"contained"`
		Created          time.Time           `json:"created"`
		DeceasedDateTime time.Time           `json:"deceasedDateTime"`
		Description      syntheaCodeEasyJSON `json:"description"`
		Diagnosis        []struct {
			DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
			Sequence           int64                    `json:"sequence"`
			Type               []syntheaCodeEasyJSON    `json:"type"`
		} `json:"diagnosis"`
		DosageInstruction []struct {
			AsNeededBoolean bool `json:"asNeededBoolean"`
			DoseAndRate     []struct {
				DoseQuantity *struct {
					Value float64 `json:"value"`
				} `json:"doseQuantity"`
				Type syntheaCodeEasyJSON `json:"type"`
			} `json:"doseAndRate"`
			Sequence int64 `json:"sequence"`
			Timing   *struct {
				Repeat *struct {
					Frequency  int64   `json:"frequency"`
					Period     float64 `json:"period"`
					PeriodUnit string  `json:"periodUnit"`
				} `json:"repeat"`
			} `json:"timing"`
		} `json:"dosageInstruction"`
		EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
		Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
		Extension         []syntheaExtensionEasyJSON `json:"extension"`
		Gender            string                     `json:"gender"`
		Goal              []syntheaReferenceEasyJSON `json:"goal"`
		ID                string                     `json:"id"`
		Identifier        []struct {
			System string              `json:"system"`
			Type   syntheaCodeEasyJSON `json:"type"`
			Use    string              `json:"use"`
			Value  string              `json:"value"`
		} `json:"identifier"`
		Insurance []struct {
			Coverage syntheaReferenceEasyJSON `json:"coverage"`
			Focal    bool                     `json:"focal"`
			Sequence int64                    `json:"sequence"`
		} `json:"insurance"`
		Insurer syntheaReferenceEasyJSON `json:"insurer"`
		Intent  string                   `json:"intent"`
		Issued  time.Time                `json:"issued"`
		Item    []struct {
			Adjudication []struct {
				Amount   syntheaCurrencyEasyJSON `json:"amount"`
				Category syntheaCodeEasyJSON     `json:"category"`
			} `json:"adjudication"`
			Category                syntheaCodeEasyJSON        `json:"category"`
			DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
			Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
			InformationSequence     []int64                    `json:"informationSequence"`
			LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
			Net                     syntheaCurrencyEasyJSON    `json:"net"`
			ProcedureSequence       []int64                    `json:"procedureSequence"`
			ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
			Sequence                int64                      `json:"sequence"`
			ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
		} `json:"item"`
		LifecycleStatus           string                     `json:"lifecycleStatus"`
		ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
		MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
		MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
		MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
		Name                      jsontext.Value             `json:"name"`
		NumberOfInstances         int64                      `json:"numberOfInstances"`
		NumberOfSeries            int64                      `json:"numberOfSeries"`
		OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
		OnsetDateTime             time.Time                  `json:"onsetDateTime"`
		Outcome                   string                     `json:"outcome"`
		Participant               []struct {
			Individual syntheaReferenceEasyJSON `json:"individual"`
			Member     syntheaReferenceEasyJSON `json:"member"`
			Role       []syntheaCodeEasyJSON    `json:"role"`
		} `json:"participant"`
		Patient syntheaReferenceEasyJSON `json:"patient"`
		Payment *struct {
			Amount syntheaCurrencyEasyJSON `json:"amount"`
		} `json:"payment"`
		PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
		Period          syntheaRangeEasyJSON     `json:"period"`
		Prescription    syntheaReferenceEasyJSON `json:"prescription"`
		PrimarySource   bool                     `json:"primarySource"`
		Priority        syntheaCodeEasyJSON      `json:"priority"`
		Procedure       []struct {
			ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
			Sequence           int64                    `json:"sequence"`
		} `json:"procedure"`
		Provider        syntheaReferenceEasyJSON   `json:"provider"`
		ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
		ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
		RecordedDate    time.Time                  `json:"recordedDate"`
		Referral        syntheaReferenceEasyJSON   `json:"referral"`
		Requester       syntheaReferenceEasyJSON   `json:"requester"`
		ResourceType    string                     `json:"resourceType"`
		Result          []syntheaReferenceEasyJSON `json:"result"`
		Series          []struct {
			BodySite syntheaCodingEasyJSON `json:"bodySite"`
			Instance []struct {
				Number   int64                 `json:"number"`
				SopClass syntheaCodingEasyJSON `json:"sopClass"`
				Title    string                `json:"title"`
				UID      string                `json:"uid"`
			} `json:"instance"`
			Modality          syntheaCodingEasyJSON `json:"modality"`
			Number            int64                 `json:"number"`
			NumberOfInstances int64                 `json:"numberOfInstances"`
			Started           string                `json:"started"`
			UID               string                `json:"uid"`
		} `json:"series"`
		ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
		Started         time.Time                `json:"started"`
		Status          string                   `json:"status"`
		Subject         syntheaReferenceEasyJSON `json:"subject"`
		SupportingInfo  []struct {
			Category       syntheaCodeEasyJSON      `json:"category"`
			Sequence       int64                    `json:"sequence"`
			ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
		} `json:"supportingInfo"`
		Telecom              []map[string]string   `json:"telecom"`
		Text                 map[string]string     `json:"text"`
		Total                jsontext.Value        `json:"total"`
		Type                 jsontext.Value        `json:"type"`
		Use                  string                `json:"use"`
		VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
		ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
		ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
		VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
	} `json:"resource"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullUrl\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullURL))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		if in.Request == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode7(out, *in.Request)
		}
	}
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		if in.Resource == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode8(out, *in.Resource)
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode8(in *jlexer.Lexer, out *struct {
	AbatementDateTime time.Time           `json:"abatementDateTime"`
	AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
	Active            bool                `json:"active"`
	Activity          []struct {
		Detail *struct {
			Code     syntheaCodeEasyJSON      `json:"code"`
			Location syntheaReferenceEasyJSON `json:"location"`
			Status   string                   `json:"status"`
		} `json:"detail"`
	} `json:"activity"`
	Address        []syntheaAddressEasyJSON   `json:"address"`
	Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
	AuthoredOn     time.Time                  `json:"authoredOn"`
	BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
	BirthDate      string                     `json:"birthDate"`
	CareTeam       []struct {
		Provider  syntheaReferenceEasyJSON `json:"provider"`
		Reference string                   `json:"reference"`
		Role      syntheaCodeEasyJSON      `json:"role"`
		Sequence  int64                    `json:"sequence"`
	} `json:"careTeam"`
	Category       []syntheaCodeEasyJSON    `json:"category"`
	Claim          syntheaReferenceEasyJSON `json:"claim"`
	Class          syntheaCodingEasyJSON    `json:"class"`
	ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
	Code           syntheaCodeEasyJSON      `json:"code"`
	Communication  []struct {
		Language syntheaCodeEasyJSON `json:"language"`
	} `json:"communication"`
	Component []struct {
		Code          syntheaCodeEasyJSON   `json:"code"`
		ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
	} `json:"component"`
	Contained []struct {
		Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
		ID           string                     `json:"id"`
		Intent       string                     `json:"intent"`
		Payor        []syntheaReferenceEasyJSON `json:"payor"`
		Performer    []syntheaReferenceEasyJSON `json:"performer"`
		Requester    syntheaReferenceEasyJSON   `json:"requester"`
		ResourceType string                     `json:"resourceType"`
		Status       string                     `json:"status"`
		Subject      syntheaReferenceEasyJSON   `json:"subject"`
		Type         syntheaCodeEasyJSON        `json:"type"`
	} `json:"contained"`
	Created          time.Time           `json:"created"`
	DeceasedDateTime time.Time           `json:"deceasedDateTime"`
	Description      syntheaCodeEasyJSON `json:"description"`
	Diagnosis        []struct {
		DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
		Sequence           int64                    `json:"sequence"`
		Type               []syntheaCodeEasyJSON    `json:"type"`
	} `json:"diagnosis"`
	DosageInstruction []struct {
		AsNeededBoolean bool `json:"asNeededBoolean"`
		DoseAndRate     []struct {
			DoseQuantity *struct {
				Value float64 `json:"value"`
			} `json:"doseQuantity"`
			Type syntheaCodeEasyJSON `json:"type"`
		} `json:"doseAndRate"`
		Sequence int64 `json:"sequence"`
		Timing   *struct {
			Repeat *struct {
				Frequency  int64   `json:"frequency"`
				Period     float64 `json:"period"`
				PeriodUnit string  `json:"periodUnit"`
			} `json:"repeat"`
		} `json:"timing"`
	} `json:"dosageInstruction"`
	EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
	Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
	Extension         []syntheaExtensionEasyJSON `json:"extension"`
	Gender            string                     `json:"gender"`
	Goal              []syntheaReferenceEasyJSON `json:"goal"`
	ID                string                     `json:"id"`
	Identifier        []struct {
		System string              `json:"system"`
		Type   syntheaCodeEasyJSON `json:"type"`
		Use    string              `json:"use"`
		Value  string              `json:"value"`
	} `json:"identifier"`
	Insurance []struct {
		Coverage syntheaReferenceEasyJSON `json:"coverage"`
		Focal    bool                     `json:"focal"`
		Sequence int64                    `json:"sequence"`
	} `json:"insurance"`
	Insurer syntheaReferenceEasyJSON `json:"insurer"`
	Intent  string                   `json:"intent"`
	Issued  time.Time                `json:"issued"`
	Item    []struct {
		Adjudication []struct {
			Amount   syntheaCurrencyEasyJSON `json:"amount"`
			Category syntheaCodeEasyJSON     `json:"category"`
		} `json:"adjudication"`
		Category                syntheaCodeEasyJSON        `json:"category"`
		DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
		Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
		InformationSequence     []int64                    `json:"informationSequence"`
		LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
		Net                     syntheaCurrencyEasyJSON    `json:"net"`
		ProcedureSequence       []int64                    `json:"procedureSequence"`
		ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
		Sequence                int64                      `json:"sequence"`
		ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
	} `json:"item"`
	LifecycleStatus           string                     `json:"lifecycleStatus"`
	ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
	MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
	MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
	MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
	Name                      jsontext.Value             `json:"name"`
	NumberOfInstances         int64                      `json:"numberOfInstances"`
	NumberOfSeries            int64                      `json:"numberOfSeries"`
	OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
	OnsetDateTime             time.Time                  `json:"onsetDateTime"`
	Outcome                   string                     `json:"outcome"`
	Participant               []struct {
		Individual syntheaReferenceEasyJSON `json:"individual"`
		Member     syntheaReferenceEasyJSON `json:"member"`
		Role       []syntheaCodeEasyJSON    `json:"role"`
	} `json:"participant"`
	Patient syntheaReferenceEasyJSON `json:"patient"`
	Payment *struct {
		Amount syntheaCurrencyEasyJSON `json:"amount"`
	} `json:"payment"`
	PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
	Period          syntheaRangeEasyJSON     `json:"period"`
	Prescription    syntheaReferenceEasyJSON `json:"prescription"`
	PrimarySource   bool                     `json:"primarySource"`
	Priority        syntheaCodeEasyJSON      `json:"priority"`
	Procedure       []struct {
		ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
		Sequence           int64                    `json:"sequence"`
	} `json:"procedure"`
	Provider        syntheaReferenceEasyJSON   `json:"provider"`
	ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
	ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
	RecordedDate    time.Time                  `json:"recordedDate"`
	Referral        syntheaReferenceEasyJSON   `json:"referral"`
	Requester       syntheaReferenceEasyJSON   `json:"requester"`
	ResourceType    string                     `json:"resourceType"`
	Result          []syntheaReferenceEasyJSON `json:"result"`
	Series          []struct {
		BodySite syntheaCodingEasyJSON `json:"bodySite"`
		Instance []struct {
			Number   int64                 `json:"number"`
			SopClass syntheaCodingEasyJSON `json:"sopClass"`
			Title    string                `json:"title"`
			UID      string                `json:"uid"`
		} `json:"instance"`
		Modality          syntheaCodingEasyJSON `json:"modality"`
		Number            int64                 `json:"number"`
		NumberOfInstances int64                 `json:"numberOfInstances"`
		Started           string                `json:"started"`
		UID               string                `json:"uid"`
	} `json:"series"`
	ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
	Started         time.Time                `json:"started"`
	Status          string                   `json:"status"`
	Subject         syntheaReferenceEasyJSON `json:"subject"`
	SupportingInfo  []struct {
		Category       syntheaCodeEasyJSON      `json:"category"`
		Sequence       int64                    `json:"sequence"`
		ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
	} `json:"supportingInfo"`
	Telecom              []map[string]string   `json:"telecom"`
	Text                 map[string]string     `json:"text"`
	Total                jsontext.Value        `json:"total"`
	Type                 jsontext.Value        `json:"type"`
	Use                  string                `json:"use"`
	VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
	ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
	ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
	VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "abatementDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AbatementDateTime).UnmarshalJSON(data))
			}
		case "achievementStatus":
			(out.AchievementStatus).UnmarshalEasyJSON(in)
		case "active":
			out.Active = bool(in.Bool())
		case "activity":
			if in.IsNull() {
				in.Skip()
				out.Activity = nil
			} else {
				in.Delim('[')
				if out.Activity == nil {
					if !in.IsDelim(']') {
						out.Activity = make([]struct {
							Detail *struct {
								Code     syntheaCodeEasyJSON      `json:"code"`
								Location syntheaReferenceEasyJSON `json:"location"`
								Status   string                   `json:"status"`
							} `json:"detail"`
						}, 0, 8)
					} else {
						out.Activity = []struct {
							Detail *struct {
								Code     syntheaCodeEasyJSON      `json:"code"`
								Location syntheaReferenceEasyJSON `json:"location"`
								Status   string                   `json:"status"`
							} `json:"detail"`
						}{}
					}
				} else {
					out.Activity = (out.Activity)[:0]
				}
				for !in.IsDelim(']') {
					var v39 struct {
						Detail *struct {
							Code     syntheaCodeEasyJSON      `json:"code"`
							Location syntheaReferenceEasyJSON `json:"location"`
							Status   string                   `json:"status"`
						} `json:"detail"`
					}
					easyjsonC5a4559bDecode9(in, &v39)
					out.Activity = append(out.Activity, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]syntheaAddressEasyJSON, 0, 0)
					} else {
						out.Address = []syntheaAddressEasyJSON{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v40 syntheaAddressEasyJSON
					(v40).UnmarshalEasyJSON(in)
					out.Address = append(out.Address, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Addresses = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v41 syntheaReferenceEasyJSON
					(v41).UnmarshalEasyJSON(in)
					out.Addresses = append(out.Addresses, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authoredOn":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AuthoredOn).UnmarshalJSON(data))
			}
		case "billablePeriod":
			(out.BillablePeriod).UnmarshalEasyJSON(in)
		case "birthDate":
			out.BirthDate = string(in.String())
		case "careTeam":
			if in.IsNull() {
				in.Skip()
				out.CareTeam = nil
			} else {
				in.Delim('[')
				if out.CareTeam == nil {
					if !in.IsDelim(']') {
						out.CareTeam = make([]struct {
							Provider  syntheaReferenceEasyJSON `json:"provider"`
							Reference string                   `json:"reference"`
							Role      syntheaCodeEasyJSON      `json:"role"`
							Sequence  int64                    `json:"sequence"`
						}, 0, 0)
					} else {
						out.CareTeam = []struct {
							Provider  syntheaReferenceEasyJSON `json:"provider"`
							Reference string                   `json:"reference"`
							Role      syntheaCodeEasyJSON      `json:"role"`
							Sequence  int64                    `json:"sequence"`
						}{}
					}
				} else {
					out.CareTeam = (out.CareTeam)[:0]
				}
				for !in.IsDelim(']') {
					var v42 struct {
						Provider  syntheaReferenceEasyJSON `json:"provider"`
						Reference string                   `json:"reference"`
						Role      syntheaCodeEasyJSON      `json:"role"`
						Sequence  int64                    `json:"sequence"`
					}
					easyjsonC5a4559bDecode10(in, &v42)
					out.CareTeam = append(out.CareTeam, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				in.Delim('[')
				if out.Category == nil {
					if !in.IsDelim(']') {
						out.Category = make([]syntheaCodeEasyJSON, 0, 1)
					} else {
						out.Category = []syntheaCodeEasyJSON{}
					}
				} else {
					out.Category = (out.Category)[:0]
				}
				for !in.IsDelim(']') {
					var v43 syntheaCodeEasyJSON
					(v43).UnmarshalEasyJSON(in)
					out.Category = append(out.Category, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "claim":
			(out.Claim).UnmarshalEasyJSON(in)
		case "class":
			(out.Class).UnmarshalEasyJSON(in)
		case "clinicalStatus":
			(out.ClinicalStatus).UnmarshalEasyJSON(in)
		case "code":
			(out.Code).UnmarshalEasyJSON(in)
		case "communication":
			if in.IsNull() {
				in.Skip()
				out.Communication = nil
			} else {
				in.Delim('[')
				if out.Communication == nil {
					if !in.IsDelim(']') {
						out.Communication = make([]struct {
							Language syntheaCodeEasyJSON `json:"language"`
						}, 0, 1)
					} else {
						out.Communication = []struct {
							Language syntheaCodeEasyJSON `json:"language"`
						}{}
					}
				} else {
					out.Communication = (out.Communication)[:0]
				}
				for !in.IsDelim(']') {
					var v44 struct {
						Language syntheaCodeEasyJSON `json:"language"`
					}
					easyjsonC5a4559bDecode11(in, &v44)
					out.Communication = append(out.Communication, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "component":
			if in.IsNull() {
				in.Skip()
				out.Component = nil
			} else {
				in.Delim('[')
				if out.Component == nil {
					if !in.IsDelim(']') {
						out.Component = make([]struct {
							Code          syntheaCodeEasyJSON   `json:"code"`
							ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
						}, 0, 0)
					} else {
						out.Component = []struct {
							Code          syntheaCodeEasyJSON   `json:"code"`
							ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
						}{}
					}
				} else {
					out.Component = (out.Component)[:0]
				}
				for !in.IsDelim(']') {
					var v45 struct {
						Code          syntheaCodeEasyJSON   `json:"code"`
						ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
					}
					easyjsonC5a4559bDecode12(in, &v45)
					out.Component = append(out.Component, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "contained":
			if in.IsNull() {
				in.Skip()
				out.Contained = nil
			} else {
				in.Delim('[')
				if out.Contained == nil {
					if !in.IsDelim(']') {
						out.Contained = make([]struct {
							Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
							ID           string                     `json:"id"`
							Intent       string                     `json:"intent"`
							Payor        []syntheaReferenceEasyJSON `json:"payor"`
							Performer    []syntheaReferenceEasyJSON `json:"performer"`
							Requester    syntheaReferenceEasyJSON   `json:"requester"`
							ResourceType string                     `json:"resourceType"`
							Status       string                     `json:"status"`
							Subject      syntheaReferenceEasyJSON   `json:"subject"`
							Type         syntheaCodeEasyJSON        `json:"type"`
						}, 0, 0)
					} else {
						out.Contained = []struct {
							Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
							ID           string                     `json:"id"`
							Intent       string                     `json:"intent"`
							Payor        []syntheaReferenceEasyJSON `json:"payor"`
							Performer    []syntheaReferenceEasyJSON `json:"performer"`
							Requester    syntheaReferenceEasyJSON   `json:"requester"`
							ResourceType string                     `json:"resourceType"`
							Status       string                     `json:"status"`
							Subject      syntheaReferenceEasyJSON   `json:"subject"`
							Type         syntheaCodeEasyJSON        `json:"type"`
						}{}
					}
				} else {
					out.Contained = (out.Contained)[:0]
				}
				for !in.IsDelim(']') {
					var v46 struct {
						Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
						ID           string                     `json:"id"`
						Intent       string                     `json:"intent"`
						Payor        []syntheaReferenceEasyJSON `json:"payor"`
						Performer    []syntheaReferenceEasyJSON `json:"performer"`
						Requester    syntheaReferenceEasyJSON   `json:"requester"`
						ResourceType string                     `json:"resourceType"`
						Status       string                     `json:"status"`
						Subject      syntheaReferenceEasyJSON   `json:"subject"`
						Type         syntheaCodeEasyJSON        `json:"type"`
					}
					easyjsonC5a4559bDecode13(in, &v46)
					out.Contained = append(out.Contained, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "deceasedDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeceasedDateTime).UnmarshalJSON(data))
			}
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		case "diagnosis":
			if in.IsNull() {
				in.Skip()
				out.Diagnosis = nil
			} else {
				in.Delim('[')
				if out.Diagnosis == nil {
					if !in.IsDelim(']') {
						out.Diagnosis = make([]struct {
							DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
							Sequence           int64                    `json:"sequence"`
							Type               []syntheaCodeEasyJSON    `json:"type"`
						}, 0, 1)
					} else {
						out.Diagnosis = []struct {
							DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
							Sequence           int64                    `json:"sequence"`
							Type               []syntheaCodeEasyJSON    `json:"type"`
						}{}
					}
				} else {
					out.Diagnosis = (out.Diagnosis)[:0]
				}
				for !in.IsDelim(']') {
					var v47 struct {
						DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
						Sequence           int64                    `json:"sequence"`
						Type               []syntheaCodeEasyJSON    `json:"type"`
					}
					easyjsonC5a4559bDecode14(in, &v47)
					out.Diagnosis = append(out.Diagnosis, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dosageInstruction":
			if in.IsNull() {
				in.Skip()
				out.DosageInstruction = nil
			} else {
				in.Delim('[')
				if out.DosageInstruction == nil {
					if !in.IsDelim(']') {
						out.DosageInstruction = make([]struct {
							AsNeededBoolean bool `json:"asNeededBoolean"`
							DoseAndRate     []struct {
								DoseQuantity *struct {
									Value float64 `json:"value"`
								} `json:"doseQuantity"`
								Type syntheaCodeEasyJSON `json:"type"`
							} `json:"doseAndRate"`
							Sequence int64 `json:"sequence"`
							Timing   *struct {
								Repeat *struct {
									Frequency  int64   `json:"frequency"`
									Period     float64 `json:"period"`
									PeriodUnit string  `json:"periodUnit"`
								} `json:"repeat"`
							} `json:"timing"`
						}, 0, 1)
					} else {
						out.DosageInstruction = []struct {
							AsNeededBoolean bool `json:"asNeededBoolean"`
							DoseAndRate     []struct {
								DoseQuantity *struct {
									Value float64 `json:"value"`
								} `json:"doseQuantity"`
								Type syntheaCodeEasyJSON `json:"type"`
							} `json:"doseAndRate"`
							Sequence int64 `json:"sequence"`
							Timing   *struct {
								Repeat *struct {
									Frequency  int64   `json:"frequency"`
									Period     float64 `json:"period"`
									PeriodUnit string  `json:"periodUnit"`
								} `json:"repeat"`
							} `json:"timing"`
						}{}
					}
				} else {
					out.DosageInstruction = (out.DosageInstruction)[:0]
				}
				for !in.IsDelim(']') {
					var v48 struct {
						AsNeededBoolean bool `json:"asNeededBoolean"`
						DoseAndRate     []struct {
							DoseQuantity *struct {
								Value float64 `json:"value"`
							} `json:"doseQuantity"`
							Type syntheaCodeEasyJSON `json:"type"`
						} `json:"doseAndRate"`
						Sequence int64 `json:"sequence"`
						Timing   *struct {
							Repeat *struct {
								Frequency  int64   `json:"frequency"`
								Period     float64 `json:"period"`
								PeriodUnit string  `json:"periodUnit"`
							} `json:"repeat"`
						} `json:"timing"`
					}
					easyjsonC5a4559bDecode15(in, &v48)
					out.DosageInstruction = append(out.DosageInstruction, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "effectiveDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EffectiveDateTime).UnmarshalJSON(data))
			}
		case "encounter":
			(out.Encounter).UnmarshalEasyJSON(in)
		case "extension":
			if in.IsNull() {
				in.Skip()
				out.Extension = nil
			} else {
				in.Delim('[')
				if out.Extension == nil {
					if !in.IsDelim(']') {
						out.Extension = make([]syntheaExtensionEasyJSON, 0, 0)
					} else {
						out.Extension = []syntheaExtensionEasyJSON{}
					}
				} else {
					out.Extension = (out.Extension)[:0]
				}
				for !in.IsDelim(']') {
					var v49 syntheaExtensionEasyJSON
					(v49).UnmarshalEasyJSON(in)
					out.Extension = append(out.Extension, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gender":
			out.Gender = string(in.String())
		case "goal":
			if in.IsNull() {
				in.Skip()
				out.Goal = nil
			} else {
				in.Delim('[')
				if out.Goal == nil {
					if !in.IsDelim(']') {
						out.Goal = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Goal = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Goal = (out.Goal)[:0]
				}
				for !in.IsDelim(']') {
					var v50 syntheaReferenceEasyJSON
					(v50).UnmarshalEasyJSON(in)
					out.Goal = append(out.Goal, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "identifier":
			if in.IsNull() {
				in.Skip()
				out.Identifier = nil
			} else {
				in.Delim('[')
				if out.Identifier == nil {
					if !in.IsDelim(']') {
						out.Identifier = make([]struct {
							System string              `json:"system"`
							Type   syntheaCodeEasyJSON `json:"type"`
							Use    string              `json:"use"`
							Value  string              `json:"value"`
						}, 0, 0)
					} else {
						out.Identifier = []struct {
							System string              `json:"system"`
							Type   syntheaCodeEasyJSON `json:"type"`
							Use    string              `json:"use"`
							Value  string              `json:"value"`
						}{}
					}
				} else {
					out.Identifier = (out.Identifier)[:0]
				}
				for !in.IsDelim(']') {
					var v51 struct {
						System string              `json:"system"`
						Type   syntheaCodeEasyJSON `json:"type"`
						Use    string              `json:"use"`
						Value  string              `json:"value"`
					}
					easyjsonC5a4559bDecode16(in, &v51)
					out.Identifier = append(out.Identifier, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "insurance":
			if in.IsNull() {
				in.Skip()
				out.Insurance = nil
			} else {
				in.Delim('[')
				if out.Insurance == nil {
					if !in.IsDelim(']') {
						out.Insurance = make([]struct {
							Coverage syntheaReferenceEasyJSON `json:"coverage"`
							Focal    bool                     `json:"focal"`
							Sequence int64                    `json:"sequence"`
						}, 0, 1)
					} else {
						out.Insurance = []struct {
							Coverage syntheaReferenceEasyJSON `json:"coverage"`
							Focal    bool                     `json:"focal"`
							Sequence int64                    `json:"sequence"`
						}{}
					}
				} else {
					out.Insurance = (out.Insurance)[:0]
				}
				for !in.IsDelim(']') {
					var v52 struct {
						Coverage syntheaReferenceEasyJSON `json:"coverage"`
						Focal    bool                     `json:"focal"`
						Sequence int64                    `json:"sequence"`
					}
					easyjsonC5a4559bDecode17(in, &v52)
					out.Insurance = append(out.Insurance, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "insurer":
			(out.Insurer).UnmarshalEasyJSON(in)
		case "intent":
			out.Intent = string(in.String())
		case "issued":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Issued).UnmarshalJSON(data))
			}
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				in.Delim('[')
				if out.Item == nil {
					if !in.IsDelim(']') {
						out.Item = make([]struct {
							Adjudication []struct {
								Amount   syntheaCurrencyEasyJSON `json:"amount"`
								Category syntheaCodeEasyJSON     `json:"category"`
							} `json:"adjudication"`
							Category                syntheaCodeEasyJSON        `json:"category"`
							DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
							Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
							InformationSequence     []int64                    `json:"informationSequence"`
							LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
							Net                     syntheaCurrencyEasyJSON    `json:"net"`
							ProcedureSequence       []int64                    `json:"procedureSequence"`
							ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
							Sequence                int64                      `json:"sequence"`
							ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
						}, 0, 0)
					} else {
						out.Item = []struct {
							Adjudication []struct {
								Amount   syntheaCurrencyEasyJSON `json:"amount"`
								Category syntheaCodeEasyJSON     `json:"category"`
							} `json:"adjudication"`
							Category                syntheaCodeEasyJSON        `json:"category"`
							DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
							Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
							InformationSequence     []int64                    `json:"informationSequence"`
							LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
							Net                     syntheaCurrencyEasyJSON    `json:"net"`
							ProcedureSequence       []int64                    `json:"procedureSequence"`
							ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
							Sequence                int64                      `json:"sequence"`
							ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
						}{}
					}
				} else {
					out.Item = (out.Item)[:0]
				}
				for !in.IsDelim(']') {
					var v53 struct {
						Adjudication []struct {
							Amount   syntheaCurrencyEasyJSON `json:"amount"`
							Category syntheaCodeEasyJSON     `json:"category"`
						} `json:"adjudication"`
						Category                syntheaCodeEasyJSON        `json:"category"`
						DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
						Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
						InformationSequence     []int64                    `json:"informationSequence"`
						LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
						Net                     syntheaCurrencyEasyJSON    `json:"net"`
						ProcedureSequence       []int64                    `json:"procedureSequence"`
						ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
						Sequence                int64                      `json:"sequence"`
						ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
					}
					easyjsonC5a4559bDecode18(in, &v53)
					out.Item = append(out.Item, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lifecycleStatus":
			out.LifecycleStatus = string(in.String())
		case "managingOrganization":
			if in.IsNull() {
				in.Skip()
				out.ManagingOrganization = nil
			} else {
				in.Delim('[')
				if out.ManagingOrganization == nil {
					if !in.IsDelim(']') {
						out.ManagingOrganization = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.ManagingOrganization = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.ManagingOrganization = (out.ManagingOrganization)[:0]
				}
				for !in.IsDelim(']') {
					var v54 syntheaReferenceEasyJSON
					(v54).UnmarshalEasyJSON(in)
					out.ManagingOrganization = append(out.ManagingOrganization, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maritalStatus":
			(out.MaritalStatus).UnmarshalEasyJSON(in)
		case "medicationCodeableConcept":
			(out.MedicationCodeableConcept).UnmarshalEasyJSON(in)
		case "multipleBirthBoolean":
			out.MultipleBirthBoolean = bool(in.Bool())
		case "name":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Name).UnmarshalJSON(data))
			}
		case "numberOfInstances":
			out.NumberOfInstances = int64(in.Int64())
		case "numberOfSeries":
			out.NumberOfSeries = int64(in.Int64())
		case "occurrenceDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OccurrenceDateTime).UnmarshalJSON(data))
			}
		case "onsetDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OnsetDateTime).UnmarshalJSON(data))
			}
		case "outcome":
			out.Outcome = string(in.String())
		case "participant":
			if in.IsNull() {
				in.Skip()
				out.Participant = nil
			} else {
				in.Delim('[')
				if out.Participant == nil {
					if !in.IsDelim(']') {
						out.Participant = make([]struct {
							Individual syntheaReferenceEasyJSON `json:"individual"`
							Member     syntheaReferenceEasyJSON `json:"member"`
							Role       []syntheaCodeEasyJSON    `json:"role"`
						}, 0, 0)
					} else {
						out.Participant = []struct {
							Individual syntheaReferenceEasyJSON `json:"individual"`
							Member     syntheaReferenceEasyJSON `json:"member"`
							Role       []syntheaCodeEasyJSON    `json:"role"`
						}{}
					}
				} else {
					out.Participant = (out.Participant)[:0]
				}
				for !in.IsDelim(']') {
					var v55 struct {
						Individual syntheaReferenceEasyJSON `json:"individual"`
						Member     syntheaReferenceEasyJSON `json:"member"`
						Role       []syntheaCodeEasyJSON    `json:"role"`
					}
					easyjsonC5a4559bDecode19(in, &v55)
					out.Participant = append(out.Participant, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "patient":
			(out.Patient).UnmarshalEasyJSON(in)
		case "payment":
			if in.IsNull() {
				in.Skip()
				out.Payment = nil
			} else {
				if out.Payment == nil {
					out.Payment = new(struct {
						Amount syntheaCurrencyEasyJSON `json:"amount"`
					})
				}
				easyjsonC5a4559bDecode20(in, out.Payment)
			}
		case "performedPeriod":
			(out.PerformedPeriod).UnmarshalEasyJSON(in)
		case "period":
			(out.Period).UnmarshalEasyJSON(in)
		case "prescription":
			(out.Prescription).UnmarshalEasyJSON(in)
		case "primarySource":
			out.PrimarySource = bool(in.Bool())
		case "priority":
			(out.Priority).UnmarshalEasyJSON(in)
		case "procedure":
			if in.IsNull() {
				in.Skip()
				out.Procedure = nil
			} else {
				in.Delim('[')
				if out.Procedure == nil {
					if !in.IsDelim(']') {
						out.Procedure = make([]struct {
							ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
							Sequence           int64                    `json:"sequence"`
						}, 0, 1)
					} else {
						out.Procedure = []struct {
							ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
							Sequence           int64                    `json:"sequence"`
						}{}
					}
				} else {
					out.Procedure = (out.Procedure)[:0]
				}
				for !in.IsDelim(']') {
					var v56 struct {
						ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
						Sequence           int64                    `json:"sequence"`
					}
					easyjsonC5a4559bDecode21(in, &v56)
					out.Procedure = append(out.Procedure, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provider":
			(out.Provider).UnmarshalEasyJSON(in)
		case "reasonCode":
			if in.IsNull() {
				in.Skip()
				out.ReasonCode = nil
			} else {
				in.Delim('[')
				if out.ReasonCode == nil {
					if !in.IsDelim(']') {
						out.ReasonCode = make([]syntheaCodeEasyJSON, 0, 1)
					} else {
						out.ReasonCode = []syntheaCodeEasyJSON{}
					}
				} else {
					out.ReasonCode = (out.ReasonCode)[:0]
				}
				for !in.IsDelim(']') {
					var v57 syntheaCodeEasyJSON
					(v57).UnmarshalEasyJSON(in)
					out.ReasonCode = append(out.ReasonCode, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reasonReference":
			if in.IsNull() {
				in.Skip()
				out.ReasonReference = nil
			} else {
				in.Delim('[')
				if out.ReasonReference == nil {
					if !in.IsDelim(']') {
						out.ReasonReference = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.ReasonReference = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.ReasonReference = (out.ReasonReference)[:0]
				}
				for !in.IsDelim(']') {
					var v58 syntheaReferenceEasyJSON
					(v58).UnmarshalEasyJSON(in)
					out.ReasonReference = append(out.ReasonReference, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recordedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RecordedDate).UnmarshalJSON(data))
			}
		case "referral":
			(out.Referral).UnmarshalEasyJSON(in)
		case "requester":
			(out.Requester).UnmarshalEasyJSON(in)
		case "resourceType":
			out.ResourceType = string(in.String())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Result = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v59 syntheaReferenceEasyJSON
					(v59).UnmarshalEasyJSON(in)
					out.Result = append(out.Result, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				in.Delim('[')
				if out.Series == nil {
					if !in.IsDelim(']') {
						out.Series = make([]struct {
							BodySite syntheaCodingEasyJSON `json:"bodySite"`
							Instance []struct {
								Number   int64                 `json:"number"`
								SopClass syntheaCodingEasyJSON `json:"sopClass"`
								Title    string                `json:"title"`
								UID      string                `json:"uid"`
							} `json:"instance"`
							Modality          syntheaCodingEasyJSON `json:"modality"`
							Number            int64                 `json:"number"`
							NumberOfInstances int64                 `json:"numberOfInstances"`
							Started           string                `json:"started"`
							UID               string                `json:"uid"`
						}, 0, 0)
					} else {
						out.Series = []struct {
							BodySite syntheaCodingEasyJSON `json:"bodySite"`
							Instance []struct {
								Number   int64                 `json:"number"`
								SopClass syntheaCodingEasyJSON `json:"sopClass"`
								Title    string                `json:"title"`
								UID      string                `json:"uid"`
							} `json:"instance"`
							Modality          syntheaCodingEasyJSON `json:"modality"`
							Number            int64                 `json:"number"`
							NumberOfInstances int64                 `json:"numberOfInstances"`
							Started           string                `json:"started"`
							UID               string                `json:"uid"`
						}{}
					}
				} else {
					out.Series = (out.Series)[:0]
				}
				for !in.IsDelim(']') {
					var v60 struct {
						BodySite syntheaCodingEasyJSON `json:"bodySite"`
						Instance []struct {
							Number   int64                 `json:"number"`
							SopClass syntheaCodingEasyJSON `json:"sopClass"`
							Title    string                `json:"title"`
							UID      string                `json:"uid"`
						} `json:"instance"`
						Modality          syntheaCodingEasyJSON `json:"modality"`
						Number            int64                 `json:"number"`
						NumberOfInstances int64                 `json:"numberOfInstances"`
						Started           string                `json:"started"`
						UID               string                `json:"uid"`
					}
					easyjsonC5a4559bDecode22(in, &v60)
					out.Series = append(out.Series, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "serviceProvider":
			(out.ServiceProvider).UnmarshalEasyJSON(in)
		case "started":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Started).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		case "subject":
			(out.Subject).UnmarshalEasyJSON(in)
		case "supportingInfo":
			if in.IsNull() {
				in.Skip()
				out.SupportingInfo = nil
			} else {
				in.Delim('[')
				if out.SupportingInfo == nil {
					if !in.IsDelim(']') {
						out.SupportingInfo = make([]struct {
							Category       syntheaCodeEasyJSON      `json:"category"`
							Sequence       int64                    `json:"sequence"`
							ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
						}, 0, 0)
					} else {
						out.SupportingInfo = []struct {
							Category       syntheaCodeEasyJSON      `json:"category"`
							Sequence       int64                    `json:"sequence"`
							ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
						}{}
					}
				} else {
					out.SupportingInfo = (out.SupportingInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v61 struct {
						Category       syntheaCodeEasyJSON      `json:"category"`
						Sequence       int64                    `json:"sequence"`
						ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
					}
					easyjsonC5a4559bDecode23(in, &v61)
					out.SupportingInfo = append(out.SupportingInfo, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "telecom":
			if in.IsNull() {
				in.Skip()
				out.Telecom = nil
			} else {
				in.Delim('[')
				if out.Telecom == nil {
					if !in.IsDelim(']') {
						out.Telecom = make([]map[string]string, 0, 8)
					} else {
						out.Telecom = []map[string]string{}
					}
				} else {
					out.Telecom = (out.Telecom)[:0]
				}
				for !in.IsDelim(']') {
					var v62 map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v62 = make(map[string]string)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v63 string
							v63 = string(in.String())
							(v62)[key] = v63
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Telecom = append(out.Telecom, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Text = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v64 string
					v64 = string(in.String())
					(out.Text)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Total).UnmarshalJSON(data))
			}
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "use":
			out.Use = string(in.String())
		case "vaccineCode":
			(out.VaccineCode).UnmarshalEasyJSON(in)
		case "valueCodeableConcept":
			(out.ValueCodeableConcept).UnmarshalEasyJSON(in)
		case "valueQuantity":
			(out.ValueQuantity).UnmarshalEasyJSON(in)
		case "verificationStatus":
			(out.VerificationStatus).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode8(out *jwriter.Writer, in struct {
	AbatementDateTime time.Time           `json:"abatementDateTime"`
	AchievementStatus syntheaCodeEasyJSON `json:"achievementStatus"`
	Active            bool                `json:"active"`
	Activity          []struct {
		Detail *struct {
			Code     syntheaCodeEasyJSON      `json:"code"`
			Location syntheaReferenceEasyJSON `json:"location"`
			Status   string                   `json:"status"`
		} `json:"detail"`
	} `json:"activity"`
	Address        []syntheaAddressEasyJSON   `json:"address"`
	Addresses      []syntheaReferenceEasyJSON `json:"addresses"`
	AuthoredOn     time.Time                  `json:"authoredOn"`
	BillablePeriod syntheaRangeEasyJSON       `json:"billablePeriod"`
	BirthDate      string                     `json:"birthDate"`
	CareTeam       []struct {
		Provider  syntheaReferenceEasyJSON `json:"provider"`
		Reference string                   `json:"reference"`
		Role      syntheaCodeEasyJSON      `json:"role"`
		Sequence  int64                    `json:"sequence"`
	} `json:"careTeam"`
	Category       []syntheaCodeEasyJSON    `json:"category"`
	Claim          syntheaReferenceEasyJSON `json:"claim"`
	Class          syntheaCodingEasyJSON    `json:"class"`
	ClinicalStatus syntheaCodeEasyJSON      `json:"clinicalStatus"`
	Code           syntheaCodeEasyJSON      `json:"code"`
	Communication  []struct {
		Language syntheaCodeEasyJSON `json:"language"`
	} `json:"communication"`
	Component []struct {
		Code          syntheaCodeEasyJSON   `json:"code"`
		ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
	} `json:"component"`
	Contained []struct {
		Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
		ID           string                     `json:"id"`
		Intent       string                     `json:"intent"`
		Payor        []syntheaReferenceEasyJSON `json:"payor"`
		Performer    []syntheaReferenceEasyJSON `json:"performer"`
		Requester    syntheaReferenceEasyJSON   `json:"requester"`
		ResourceType string                     `json:"resourceType"`
		Status       string                     `json:"status"`
		Subject      syntheaReferenceEasyJSON   `json:"subject"`
		Type         syntheaCodeEasyJSON        `json:"type"`
	} `json:"contained"`
	Created          time.Time           `json:"created"`
	DeceasedDateTime time.Time           `json:"deceasedDateTime"`
	Description      syntheaCodeEasyJSON `json:"description"`
	Diagnosis        []struct {
		DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
		Sequence           int64                    `json:"sequence"`
		Type               []syntheaCodeEasyJSON    `json:"type"`
	} `json:"diagnosis"`
	DosageInstruction []struct {
		AsNeededBoolean bool `json:"asNeededBoolean"`
		DoseAndRate     []struct {
			DoseQuantity *struct {
				Value float64 `json:"value"`
			} `json:"doseQuantity"`
			Type syntheaCodeEasyJSON `json:"type"`
		} `json:"doseAndRate"`
		Sequence int64 `json:"sequence"`
		Timing   *struct {
			Repeat *struct {
				Frequency  int64   `json:"frequency"`
				Period     float64 `json:"period"`
				PeriodUnit string  `json:"periodUnit"`
			} `json:"repeat"`
		} `json:"timing"`
	} `json:"dosageInstruction"`
	EffectiveDateTime time.Time                  `json:"effectiveDateTime"`
	Encounter         syntheaReferenceEasyJSON   `json:"encounter"`
	Extension         []syntheaExtensionEasyJSON `json:"extension"`
	Gender            string                     `json:"gender"`
	Goal              []syntheaReferenceEasyJSON `json:"goal"`
	ID                string                     `json:"id"`
	Identifier        []struct {
		System string              `json:"system"`
		Type   syntheaCodeEasyJSON `json:"type"`
		Use    string              `json:"use"`
		Value  string              `json:"value"`
	} `json:"identifier"`
	Insurance []struct {
		Coverage syntheaReferenceEasyJSON `json:"coverage"`
		Focal    bool                     `json:"focal"`
		Sequence int64                    `json:"sequence"`
	} `json:"insurance"`
	Insurer syntheaReferenceEasyJSON `json:"insurer"`
	Intent  string                   `json:"intent"`
	Issued  time.Time                `json:"issued"`
	Item    []struct {
		Adjudication []struct {
			Amount   syntheaCurrencyEasyJSON `json:"amount"`
			Category syntheaCodeEasyJSON     `json:"category"`
		} `json:"adjudication"`
		Category                syntheaCodeEasyJSON        `json:"category"`
		DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
		Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
		InformationSequence     []int64                    `json:"informationSequence"`
		LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
		Net                     syntheaCurrencyEasyJSON    `json:"net"`
		ProcedureSequence       []int64                    `json:"procedureSequence"`
		ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
		Sequence                int64                      `json:"sequence"`
		ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
	} `json:"item"`
	LifecycleStatus           string                     `json:"lifecycleStatus"`
	ManagingOrganization      []syntheaReferenceEasyJSON `json:"managingOrganization"`
	MaritalStatus             syntheaCodeEasyJSON        `json:"maritalStatus"`
	MedicationCodeableConcept syntheaCodeEasyJSON        `json:"medicationCodeableConcept"`
	MultipleBirthBoolean      bool                       `json:"multipleBirthBoolean"`
	Name                      jsontext.Value             `json:"name"`
	NumberOfInstances         int64                      `json:"numberOfInstances"`
	NumberOfSeries            int64                      `json:"numberOfSeries"`
	OccurrenceDateTime        time.Time                  `json:"occurrenceDateTime"`
	OnsetDateTime             time.Time                  `json:"onsetDateTime"`
	Outcome                   string                     `json:"outcome"`
	Participant               []struct {
		Individual syntheaReferenceEasyJSON `json:"individual"`
		Member     syntheaReferenceEasyJSON `json:"member"`
		Role       []syntheaCodeEasyJSON    `json:"role"`
	} `json:"participant"`
	Patient syntheaReferenceEasyJSON `json:"patient"`
	Payment *struct {
		Amount syntheaCurrencyEasyJSON `json:"amount"`
	} `json:"payment"`
	PerformedPeriod syntheaRangeEasyJSON     `json:"performedPeriod"`
	Period          syntheaRangeEasyJSON     `json:"period"`
	Prescription    syntheaReferenceEasyJSON `json:"prescription"`
	PrimarySource   bool                     `json:"primarySource"`
	Priority        syntheaCodeEasyJSON      `json:"priority"`
	Procedure       []struct {
		ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
		Sequence           int64                    `json:"sequence"`
	} `json:"procedure"`
	Provider        syntheaReferenceEasyJSON   `json:"provider"`
	ReasonCode      []syntheaCodeEasyJSON      `json:"reasonCode"`
	ReasonReference []syntheaReferenceEasyJSON `json:"reasonReference"`
	RecordedDate    time.Time                  `json:"recordedDate"`
	Referral        syntheaReferenceEasyJSON   `json:"referral"`
	Requester       syntheaReferenceEasyJSON   `json:"requester"`
	ResourceType    string                     `json:"resourceType"`
	Result          []syntheaReferenceEasyJSON `json:"result"`
	Series          []struct {
		BodySite syntheaCodingEasyJSON `json:"bodySite"`
		Instance []struct {
			Number   int64                 `json:"number"`
			SopClass syntheaCodingEasyJSON `json:"sopClass"`
			Title    string                `json:"title"`
			UID      string                `json:"uid"`
		} `json:"instance"`
		Modality          syntheaCodingEasyJSON `json:"modality"`
		Number            int64                 `json:"number"`
		NumberOfInstances int64                 `json:"numberOfInstances"`
		Started           string                `json:"started"`
		UID               string                `json:"uid"`
	} `json:"series"`
	ServiceProvider syntheaReferenceEasyJSON `json:"serviceProvider"`
	Started         time.Time                `json:"started"`
	Status          string                   `json:"status"`
	Subject         syntheaReferenceEasyJSON `json:"subject"`
	SupportingInfo  []struct {
		Category       syntheaCodeEasyJSON      `json:"category"`
		Sequence       int64                    `json:"sequence"`
		ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
	} `json:"supportingInfo"`
	Telecom              []map[string]string   `json:"telecom"`
	Text                 map[string]string     `json:"text"`
	Total                jsontext.Value        `json:"total"`
	Type                 jsontext.Value        `json:"type"`
	Use                  string                `json:"use"`
	VaccineCode          syntheaCodeEasyJSON   `json:"vaccineCode"`
	ValueCodeableConcept syntheaCodeEasyJSON   `json:"valueCodeableConcept"`
	ValueQuantity        syntheaCodingEasyJSON `json:"valueQuantity"`
	VerificationStatus   syntheaCodeEasyJSON   `json:"verificationStatus"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"abatementDateTime\":"
		out.RawString(prefix[1:])
		out.Raw((in.AbatementDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"achievementStatus\":"
		out.RawString(prefix)
		(in.AchievementStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		if in.Activity == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Activity {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode9(out, v66)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		if in.Address == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.Address {
				if v67 > 0 {
					out.RawByte(',')
				}
				(v68).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v69, v70 := range in.Addresses {
				if v69 > 0 {
					out.RawByte(',')
				}
				(v70).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"authoredOn\":"
		out.RawString(prefix)
		out.Raw((in.AuthoredOn).MarshalJSON())
	}
	{
		const prefix string = ",\"billablePeriod\":"
		out.RawString(prefix)
		(in.BillablePeriod).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"birthDate\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"careTeam\":"
		out.RawString(prefix)
		if in.CareTeam == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.CareTeam {
				if v71 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode10(out, v72)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		if in.Category == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v73, v74 := range in.Category {
				if v73 > 0 {
					out.RawByte(',')
				}
				(v74).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"claim\":"
		out.RawString(prefix)
		(in.Claim).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix)
		(in.Class).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"clinicalStatus\":"
		out.RawString(prefix)
		(in.ClinicalStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		(in.Code).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"communication\":"
		out.RawString(prefix)
		if in.Communication == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.Communication {
				if v75 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode11(out, v76)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		if in.Component == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Component {
				if v77 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode12(out, v78)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"contained\":"
		out.RawString(prefix)
		if in.Contained == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v79, v80 := range in.Contained {
				if v79 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode13(out, v80)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"deceasedDateTime\":"
		out.RawString(prefix)
		out.Raw((in.DeceasedDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"diagnosis\":"
		out.RawString(prefix)
		if in.Diagnosis == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.Diagnosis {
				if v81 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode14(out, v82)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dosageInstruction\":"
		out.RawString(prefix)
		if in.DosageInstruction == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.DosageInstruction {
				if v83 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode15(out, v84)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"effectiveDateTime\":"
		out.RawString(prefix)
		out.Raw((in.EffectiveDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"encounter\":"
		out.RawString(prefix)
		(in.Encounter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		if in.Extension == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v85, v86 := range in.Extension {
				if v85 > 0 {
					out.RawByte(',')
				}
				(v86).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		if in.Goal == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.Goal {
				if v87 > 0 {
					out.RawByte(',')
				}
				(v88).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		if in.Identifier == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Identifier {
				if v89 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode16(out, v90)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"insurance\":"
		out.RawString(prefix)
		if in.Insurance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.Insurance {
				if v91 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode17(out, v92)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"insurer\":"
		out.RawString(prefix)
		(in.Insurer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"intent\":"
		out.RawString(prefix)
		out.String(string(in.Intent))
	}
	{
		const prefix string = ",\"issued\":"
		out.RawString(prefix)
		out.Raw((in.Issued).MarshalJSON())
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		if in.Item == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.Item {
				if v93 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode18(out, v94)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lifecycleStatus\":"
		out.RawString(prefix)
		out.String(string(in.LifecycleStatus))
	}
	{
		const prefix string = ",\"managingOrganization\":"
		out.RawString(prefix)
		if in.ManagingOrganization == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.ManagingOrganization {
				if v95 > 0 {
					out.RawByte(',')
				}
				(v96).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"maritalStatus\":"
		out.RawString(prefix)
		(in.MaritalStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"medicationCodeableConcept\":"
		out.RawString(prefix)
		(in.MedicationCodeableConcept).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"multipleBirthBoolean\":"
		out.RawString(prefix)
		out.Bool(bool(in.MultipleBirthBoolean))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.Raw((in.Name).MarshalJSON())
	}
	{
		const prefix string = ",\"numberOfInstances\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfInstances))
	}
	{
		const prefix string = ",\"numberOfSeries\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfSeries))
	}
	{
		const prefix string = ",\"occurrenceDateTime\":"
		out.RawString(prefix)
		out.Raw((in.OccurrenceDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"onsetDateTime\":"
		out.RawString(prefix)
		out.Raw((in.OnsetDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"outcome\":"
		out.RawString(prefix)
		out.String(string(in.Outcome))
	}
	{
		const prefix string = ",\"participant\":"
		out.RawString(prefix)
		if in.Participant == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v97, v98 := range in.Participant {
				if v97 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode19(out, v98)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"patient\":"
		out.RawString(prefix)
		(in.Patient).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		if in.Payment == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode20(out, *in.Payment)
		}
	}
	{
		const prefix string = ",\"performedPeriod\":"
		out.RawString(prefix)
		(in.PerformedPeriod).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		(in.Period).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"prescription\":"
		out.RawString(prefix)
		(in.Prescription).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"primarySource\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrimarySource))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		(in.Priority).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"procedure\":"
		out.RawString(prefix)
		if in.Procedure == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v99, v100 := range in.Procedure {
				if v99 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode21(out, v100)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		(in.Provider).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reasonCode\":"
		out.RawString(prefix)
		if in.ReasonCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.ReasonCode {
				if v101 > 0 {
					out.RawByte(',')
				}
				(v102).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reasonReference\":"
		out.RawString(prefix)
		if in.ReasonReference == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v103, v104 := range in.ReasonReference {
				if v103 > 0 {
					out.RawByte(',')
				}
				(v104).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"recordedDate\":"
		out.RawString(prefix)
		out.Raw((in.RecordedDate).MarshalJSON())
	}
	{
		const prefix string = ",\"referral\":"
		out.RawString(prefix)
		(in.Referral).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"requester\":"
		out.RawString(prefix)
		(in.Requester).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resourceType\":"
		out.RawString(prefix)
		out.String(string(in.ResourceType))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v105, v106 := range in.Result {
				if v105 > 0 {
					out.RawByte(',')
				}
				(v106).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix)
		if in.Series == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.Series {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode22(out, v108)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"serviceProvider\":"
		out.RawString(prefix)
		(in.ServiceProvider).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"started\":"
		out.RawString(prefix)
		out.Raw((in.Started).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		(in.Subject).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"supportingInfo\":"
		out.RawString(prefix)
		if in.SupportingInfo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v109, v110 := range in.SupportingInfo {
				if v109 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode23(out, v110)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"telecom\":"
		out.RawString(prefix)
		if in.Telecom == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.Telecom {
				if v111 > 0 {
					out.RawByte(',')
				}
				if v112 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v113First := true
					for v113Name, v113Value := range v112 {
						if v113First {
							v113First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v113Name))
						out.RawByte(':')
						out.String(string(v113Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v114First := true
			for v114Name, v114Value := range in.Text {
				if v114First {
					v114First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v114Name))
				out.RawByte(':')
				out.String(string(v114Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Raw((in.Total).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix)
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"vaccineCode\":"
		out.RawString(prefix)
		(in.VaccineCode).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"valueCodeableConcept\":"
		out.RawString(prefix)
		(in.ValueCodeableConcept).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"valueQuantity\":"
		out.RawString(prefix)
		(in.ValueQuantity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"verificationStatus\":"
		out.RawString(prefix)
		(in.VerificationStatus).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode23(in *jlexer.Lexer, out *struct {
	Category       syntheaCodeEasyJSON      `json:"category"`
	Sequence       int64                    `json:"sequence"`
	ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			(out.Category).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = int64(in.Int64())
		case "valueReference":
			(out.ValueReference).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode23(out *jwriter.Writer, in struct {
	Category       syntheaCodeEasyJSON      `json:"category"`
	Sequence       int64                    `json:"sequence"`
	ValueReference syntheaReferenceEasyJSON `json:"valueReference"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		(in.Category).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	{
		const prefix string = ",\"valueReference\":"
		out.RawString(prefix)
		(in.ValueReference).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode22(in *jlexer.Lexer, out *struct {
	BodySite syntheaCodingEasyJSON `json:"bodySite"`
	Instance []struct {
		Number   int64                 `json:"number"`
		SopClass syntheaCodingEasyJSON `json:"sopClass"`
		Title    string                `json:"title"`
		UID      string                `json:"uid"`
	} `json:"instance"`
	Modality          syntheaCodingEasyJSON `json:"modality"`
	Number            int64                 `json:"number"`
	NumberOfInstances int64                 `json:"numberOfInstances"`
	Started           string                `json:"started"`
	UID               string                `json:"uid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bodySite":
			(out.BodySite).UnmarshalEasyJSON(in)
		case "instance":
			if in.IsNull() {
				in.Skip()
				out.Instance = nil
			} else {
				in.Delim('[')
				if out.Instance == nil {
					if !in.IsDelim(']') {
						out.Instance = make([]struct {
							Number   int64                 `json:"number"`
							SopClass syntheaCodingEasyJSON `json:"sopClass"`
							Title    string                `json:"title"`
							UID      string                `json:"uid"`
						}, 0, 0)
					} else {
						out.Instance = []struct {
							Number   int64                 `json:"number"`
							SopClass syntheaCodingEasyJSON `json:"sopClass"`
							Title    string                `json:"title"`
							UID      string                `json:"uid"`
						}{}
					}
				} else {
					out.Instance = (out.Instance)[:0]
				}
				for !in.IsDelim(']') {
					var v115 struct {
						Number   int64                 `json:"number"`
						SopClass syntheaCodingEasyJSON `json:"sopClass"`
						Title    string                `json:"title"`
						UID      string                `json:"uid"`
					}
					easyjsonC5a4559bDecode24(in, &v115)
					out.Instance = append(out.Instance, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "modality":
			(out.Modality).UnmarshalEasyJSON(in)
		case "number":
			out.Number = int64(in.Int64())
		case "numberOfInstances":
			out.NumberOfInstances = int64(in.Int64())
		case "started":
			out.Started = string(in.String())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode22(out *jwriter.Writer, in struct {
	BodySite syntheaCodingEasyJSON `json:"bodySite"`
	Instance []struct {
		Number   int64                 `json:"number"`
		SopClass syntheaCodingEasyJSON `json:"sopClass"`
		Title    string                `json:"title"`
		UID      string                `json:"uid"`
	} `json:"instance"`
	Modality          syntheaCodingEasyJSON `json:"modality"`
	Number            int64                 `json:"number"`
	NumberOfInstances int64                 `json:"numberOfInstances"`
	Started           string                `json:"started"`
	UID               string                `json:"uid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bodySite\":"
		out.RawString(prefix[1:])
		(in.BodySite).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"instance\":"
		out.RawString(prefix)
		if in.Instance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.Instance {
				if v116 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode24(out, v117)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"modality\":"
		out.RawString(prefix)
		(in.Modality).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int64(int64(in.Number))
	}
	{
		const prefix string = ",\"numberOfInstances\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfInstances))
	}
	{
		const prefix string = ",\"started\":"
		out.RawString(prefix)
		out.String(string(in.Started))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode24(in *jlexer.Lexer, out *struct {
	Number   int64                 `json:"number"`
	SopClass syntheaCodingEasyJSON `json:"sopClass"`
	Title    string                `json:"title"`
	UID      string                `json:"uid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = int64(in.Int64())
		case "sopClass":
			(out.SopClass).UnmarshalEasyJSON(in)
		case "title":
			out.Title = string(in.String())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode24(out *jwriter.Writer, in struct {
	Number   int64                 `json:"number"`
	SopClass syntheaCodingEasyJSON `json:"sopClass"`
	Title    string                `json:"title"`
	UID      string                `json:"uid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Number))
	}
	{
		const prefix string = ",\"sopClass\":"
		out.RawString(prefix)
		(in.SopClass).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode21(in *jlexer.Lexer, out *struct {
	ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
	Sequence           int64                    `json:"sequence"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "procedureReference":
			(out.ProcedureReference).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode21(out *jwriter.Writer, in struct {
	ProcedureReference syntheaReferenceEasyJSON `json:"procedureReference"`
	Sequence           int64                    `json:"sequence"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"procedureReference\":"
		out.RawString(prefix[1:])
		(in.ProcedureReference).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode20(in *jlexer.Lexer, out *struct {
	Amount syntheaCurrencyEasyJSON `json:"amount"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode20(out *jwriter.Writer, in struct {
	Amount syntheaCurrencyEasyJSON `json:"amount"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode19(in *jlexer.Lexer, out *struct {
	Individual syntheaReferenceEasyJSON `json:"individual"`
	Member     syntheaReferenceEasyJSON `json:"member"`
	Role       []syntheaCodeEasyJSON    `json:"role"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "individual":
			(out.Individual).UnmarshalEasyJSON(in)
		case "member":
			(out.Member).UnmarshalEasyJSON(in)
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				in.Delim('[')
				if out.Role == nil {
					if !in.IsDelim(']') {
						out.Role = make([]syntheaCodeEasyJSON, 0, 1)
					} else {
						out.Role = []syntheaCodeEasyJSON{}
					}
				} else {
					out.Role = (out.Role)[:0]
				}
				for !in.IsDelim(']') {
					var v118 syntheaCodeEasyJSON
					(v118).UnmarshalEasyJSON(in)
					out.Role = append(out.Role, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode19(out *jwriter.Writer, in struct {
	Individual syntheaReferenceEasyJSON `json:"individual"`
	Member     syntheaReferenceEasyJSON `json:"member"`
	Role       []syntheaCodeEasyJSON    `json:"role"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"individual\":"
		out.RawString(prefix[1:])
		(in.Individual).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(in.Member).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		if in.Role == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.Role {
				if v119 > 0 {
					out.RawByte(',')
				}
				(v120).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode18(in *jlexer.Lexer, out *struct {
	Adjudication []struct {
		Amount   syntheaCurrencyEasyJSON `json:"amount"`
		Category syntheaCodeEasyJSON     `json:"category"`
	} `json:"adjudication"`
	Category                syntheaCodeEasyJSON        `json:"category"`
	DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
	Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
	InformationSequence     []int64                    `json:"informationSequence"`
	LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
	Net                     syntheaCurrencyEasyJSON    `json:"net"`
	ProcedureSequence       []int64                    `json:"procedureSequence"`
	ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
	Sequence                int64                      `json:"sequence"`
	ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adjudication":
			if in.IsNull() {
				in.Skip()
				out.Adjudication = nil
			} else {
				in.Delim('[')
				if out.Adjudication == nil {
					if !in.IsDelim(']') {
						out.Adjudication = make([]struct {
							Amount   syntheaCurrencyEasyJSON `json:"amount"`
							Category syntheaCodeEasyJSON     `json:"category"`
						}, 0, 1)
					} else {
						out.Adjudication = []struct {
							Amount   syntheaCurrencyEasyJSON `json:"amount"`
							Category syntheaCodeEasyJSON     `json:"category"`
						}{}
					}
				} else {
					out.Adjudication = (out.Adjudication)[:0]
				}
				for !in.IsDelim(']') {
					var v121 struct {
						Amount   syntheaCurrencyEasyJSON `json:"amount"`
						Category syntheaCodeEasyJSON     `json:"category"`
					}
					easyjsonC5a4559bDecode25(in, &v121)
					out.Adjudication = append(out.Adjudication, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "category":
			(out.Category).UnmarshalEasyJSON(in)
		case "diagnosisSequence":
			if in.IsNull() {
				in.Skip()
				out.DiagnosisSequence = nil
			} else {
				in.Delim('[')
				if out.DiagnosisSequence == nil {
					if !in.IsDelim(']') {
						out.DiagnosisSequence = make([]int64, 0, 8)
					} else {
						out.DiagnosisSequence = []int64{}
					}
				} else {
					out.DiagnosisSequence = (out.DiagnosisSequence)[:0]
				}
				for !in.IsDelim(']') {
					var v122 int64
					v122 = int64(in.Int64())
					out.DiagnosisSequence = append(out.DiagnosisSequence, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "encounter":
			if in.IsNull() {
				in.Skip()
				out.Encounter = nil
			} else {
				in.Delim('[')
				if out.Encounter == nil {
					if !in.IsDelim(']') {
						out.Encounter = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Encounter = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Encounter = (out.Encounter)[:0]
				}
				for !in.IsDelim(']') {
					var v123 syntheaReferenceEasyJSON
					(v123).UnmarshalEasyJSON(in)
					out.Encounter = append(out.Encounter, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "informationSequence":
			if in.IsNull() {
				in.Skip()
				out.InformationSequence = nil
			} else {
				in.Delim('[')
				if out.InformationSequence == nil {
					if !in.IsDelim(']') {
						out.InformationSequence = make([]int64, 0, 8)
					} else {
						out.InformationSequence = []int64{}
					}
				} else {
					out.InformationSequence = (out.InformationSequence)[:0]
				}
				for !in.IsDelim(']') {
					var v124 int64
					v124 = int64(in.Int64())
					out.InformationSequence = append(out.InformationSequence, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "locationCodeableConcept":
			(out.LocationCodeableConcept).UnmarshalEasyJSON(in)
		case "net":
			(out.Net).UnmarshalEasyJSON(in)
		case "procedureSequence":
			if in.IsNull() {
				in.Skip()
				out.ProcedureSequence = nil
			} else {
				in.Delim('[')
				if out.ProcedureSequence == nil {
					if !in.IsDelim(']') {
						out.ProcedureSequence = make([]int64, 0, 8)
					} else {
						out.ProcedureSequence = []int64{}
					}
				} else {
					out.ProcedureSequence = (out.ProcedureSequence)[:0]
				}
				for !in.IsDelim(']') {
					var v125 int64
					v125 = int64(in.Int64())
					out.ProcedureSequence = append(out.ProcedureSequence, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "productOrService":
			(out.ProductOrService).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = int64(in.Int64())
		case "servicedPeriod":
			(out.ServicedPeriod).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode18(out *jwriter.Writer, in struct {
	Adjudication []struct {
		Amount   syntheaCurrencyEasyJSON `json:"amount"`
		Category syntheaCodeEasyJSON     `json:"category"`
	} `json:"adjudication"`
	Category                syntheaCodeEasyJSON        `json:"category"`
	DiagnosisSequence       []int64                    `json:"diagnosisSequence"`
	Encounter               []syntheaReferenceEasyJSON `json:"encounter"`
	InformationSequence     []int64                    `json:"informationSequence"`
	LocationCodeableConcept syntheaCodeEasyJSON        `json:"locationCodeableConcept"`
	Net                     syntheaCurrencyEasyJSON    `json:"net"`
	ProcedureSequence       []int64                    `json:"procedureSequence"`
	ProductOrService        syntheaCodeEasyJSON        `json:"productOrService"`
	Sequence                int64                      `json:"sequence"`
	ServicedPeriod          syntheaRangeEasyJSON       `json:"servicedPeriod"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adjudication\":"
		out.RawString(prefix[1:])
		if in.Adjudication == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v126, v127 := range in.Adjudication {
				if v126 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode25(out, v127)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		(in.Category).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"diagnosisSequence\":"
		out.RawString(prefix)
		if in.DiagnosisSequence == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v128, v129 := range in.DiagnosisSequence {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v129))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"encounter\":"
		out.RawString(prefix)
		if in.Encounter == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v130, v131 := range in.Encounter {
				if v130 > 0 {
					out.RawByte(',')
				}
				(v131).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"informationSequence\":"
		out.RawString(prefix)
		if in.InformationSequence == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v132, v133 := range in.InformationSequence {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v133))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"locationCodeableConcept\":"
		out.RawString(prefix)
		(in.LocationCodeableConcept).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"net\":"
		out.RawString(prefix)
		(in.Net).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"procedureSequence\":"
		out.RawString(prefix)
		if in.ProcedureSequence == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.ProcedureSequence {
				if v134 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v135))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"productOrService\":"
		out.RawString(prefix)
		(in.ProductOrService).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	{
		const prefix string = ",\"servicedPeriod\":"
		out.RawString(prefix)
		(in.ServicedPeriod).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode25(in *jlexer.Lexer, out *struct {
	Amount   syntheaCurrencyEasyJSON `json:"amount"`
	Category syntheaCodeEasyJSON     `json:"category"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "category":
			(out.Category).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode25(out *jwriter.Writer, in struct {
	Amount   syntheaCurrencyEasyJSON `json:"amount"`
	Category syntheaCodeEasyJSON     `json:"category"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		(in.Category).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode17(in *jlexer.Lexer, out *struct {
	Coverage syntheaReferenceEasyJSON `json:"coverage"`
	Focal    bool                     `json:"focal"`
	Sequence int64                    `json:"sequence"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coverage":
			(out.Coverage).UnmarshalEasyJSON(in)
		case "focal":
			out.Focal = bool(in.Bool())
		case "sequence":
			out.Sequence = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode17(out *jwriter.Writer, in struct {
	Coverage syntheaReferenceEasyJSON `json:"coverage"`
	Focal    bool                     `json:"focal"`
	Sequence int64                    `json:"sequence"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coverage\":"
		out.RawString(prefix[1:])
		(in.Coverage).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"focal\":"
		out.RawString(prefix)
		out.Bool(bool(in.Focal))
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode16(in *jlexer.Lexer, out *struct {
	System string              `json:"system"`
	Type   syntheaCodeEasyJSON `json:"type"`
	Use    string              `json:"use"`
	Value  string              `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "system":
			out.System = string(in.String())
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "use":
			out.Use = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode16(out *jwriter.Writer, in struct {
	System string              `json:"system"`
	Type   syntheaCodeEasyJSON `json:"type"`
	Use    string              `json:"use"`
	Value  string              `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix[1:])
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"use\":"
		out.RawString(prefix)
		out.String(string(in.Use))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode15(in *jlexer.Lexer, out *struct {
	AsNeededBoolean bool `json:"asNeededBoolean"`
	DoseAndRate     []struct {
		DoseQuantity *struct {
			Value float64 `json:"value"`
		} `json:"doseQuantity"`
		Type syntheaCodeEasyJSON `json:"type"`
	} `json:"doseAndRate"`
	Sequence int64 `json:"sequence"`
	Timing   *struct {
		Repeat *struct {
			Frequency  int64   `json:"frequency"`
			Period     float64 `json:"period"`
			PeriodUnit string  `json:"periodUnit"`
		} `json:"repeat"`
	} `json:"timing"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asNeededBoolean":
			out.AsNeededBoolean = bool(in.Bool())
		case "doseAndRate":
			if in.IsNull() {
				in.Skip()
				out.DoseAndRate = nil
			} else {
				in.Delim('[')
				if out.DoseAndRate == nil {
					if !in.IsDelim(']') {
						out.DoseAndRate = make([]struct {
							DoseQuantity *struct {
								Value float64 `json:"value"`
							} `json:"doseQuantity"`
							Type syntheaCodeEasyJSON `json:"type"`
						}, 0, 1)
					} else {
						out.DoseAndRate = []struct {
							DoseQuantity *struct {
								Value float64 `json:"value"`
							} `json:"doseQuantity"`
							Type syntheaCodeEasyJSON `json:"type"`
						}{}
					}
				} else {
					out.DoseAndRate = (out.DoseAndRate)[:0]
				}
				for !in.IsDelim(']') {
					var v136 struct {
						DoseQuantity *struct {
							Value float64 `json:"value"`
						} `json:"doseQuantity"`
						Type syntheaCodeEasyJSON `json:"type"`
					}
					easyjsonC5a4559bDecode26(in, &v136)
					out.DoseAndRate = append(out.DoseAndRate, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sequence":
			out.Sequence = int64(in.Int64())
		case "timing":
			if in.IsNull() {
				in.Skip()
				out.Timing = nil
			} else {
				if out.Timing == nil {
					out.Timing = new(struct {
						Repeat *struct {
							Frequency  int64   `json:"frequency"`
							Period     float64 `json:"period"`
							PeriodUnit string  `json:"periodUnit"`
						} `json:"repeat"`
					})
				}
				easyjsonC5a4559bDecode27(in, out.Timing)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode15(out *jwriter.Writer, in struct {
	AsNeededBoolean bool `json:"asNeededBoolean"`
	DoseAndRate     []struct {
		DoseQuantity *struct {
			Value float64 `json:"value"`
		} `json:"doseQuantity"`
		Type syntheaCodeEasyJSON `json:"type"`
	} `json:"doseAndRate"`
	Sequence int64 `json:"sequence"`
	Timing   *struct {
		Repeat *struct {
			Frequency  int64   `json:"frequency"`
			Period     float64 `json:"period"`
			PeriodUnit string  `json:"periodUnit"`
		} `json:"repeat"`
	} `json:"timing"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asNeededBoolean\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.AsNeededBoolean))
	}
	{
		const prefix string = ",\"doseAndRate\":"
		out.RawString(prefix)
		if in.DoseAndRate == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v137, v138 := range in.DoseAndRate {
				if v137 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode26(out, v138)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	{
		const prefix string = ",\"timing\":"
		out.RawString(prefix)
		if in.Timing == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode27(out, *in.Timing)
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode27(in *jlexer.Lexer, out *struct {
	Repeat *struct {
		Frequency  int64   `json:"frequency"`
		Period     float64 `json:"period"`
		PeriodUnit string  `json:"periodUnit"`
	} `json:"repeat"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repeat":
			if in.IsNull() {
				in.Skip()
				out.Repeat = nil
			} else {
				if out.Repeat == nil {
					out.Repeat = new(struct {
						Frequency  int64   `json:"frequency"`
						Period     float64 `json:"period"`
						PeriodUnit string  `json:"periodUnit"`
					})
				}
				easyjsonC5a4559bDecode28(in, out.Repeat)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode27(out *jwriter.Writer, in struct {
	Repeat *struct {
		Frequency  int64   `json:"frequency"`
		Period     float64 `json:"period"`
		PeriodUnit string  `json:"periodUnit"`
	} `json:"repeat"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repeat\":"
		out.RawString(prefix[1:])
		if in.Repeat == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode28(out, *in.Repeat)
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode28(in *jlexer.Lexer, out *struct {
	Frequency  int64   `json:"frequency"`
	Period     float64 `json:"period"`
	PeriodUnit string  `json:"periodUnit"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "frequency":
			out.Frequency = int64(in.Int64())
		case "period":
			out.Period = float64(in.Float64())
		case "periodUnit":
			out.PeriodUnit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode28(out *jwriter.Writer, in struct {
	Frequency  int64   `json:"frequency"`
	Period     float64 `json:"period"`
	PeriodUnit string  `json:"periodUnit"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"frequency\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Frequency))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		out.Float64(float64(in.Period))
	}
	{
		const prefix string = ",\"periodUnit\":"
		out.RawString(prefix)
		out.String(string(in.PeriodUnit))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode26(in *jlexer.Lexer, out *struct {
	DoseQuantity *struct {
		Value float64 `json:"value"`
	} `json:"doseQuantity"`
	Type syntheaCodeEasyJSON `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "doseQuantity":
			if in.IsNull() {
				in.Skip()
				out.DoseQuantity = nil
			} else {
				if out.DoseQuantity == nil {
					out.DoseQuantity = new(struct {
						Value float64 `json:"value"`
					})
				}
				easyjsonC5a4559bDecode29(in, out.DoseQuantity)
			}
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode26(out *jwriter.Writer, in struct {
	DoseQuantity *struct {
		Value float64 `json:"value"`
	} `json:"doseQuantity"`
	Type syntheaCodeEasyJSON `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"doseQuantity\":"
		out.RawString(prefix[1:])
		if in.DoseQuantity == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode29(out, *in.DoseQuantity)
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode29(in *jlexer.Lexer, out *struct {
	Value float64 `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode29(out *jwriter.Writer, in struct {
	Value float64 `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode14(in *jlexer.Lexer, out *struct {
	DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
	Sequence           int64                    `json:"sequence"`
	Type               []syntheaCodeEasyJSON    `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "diagnosisReference":
			(out.DiagnosisReference).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = int64(in.Int64())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]syntheaCodeEasyJSON, 0, 1)
					} else {
						out.Type = []syntheaCodeEasyJSON{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v139 syntheaCodeEasyJSON
					(v139).UnmarshalEasyJSON(in)
					out.Type = append(out.Type, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode14(out *jwriter.Writer, in struct {
	DiagnosisReference syntheaReferenceEasyJSON `json:"diagnosisReference"`
	Sequence           int64                    `json:"sequence"`
	Type               []syntheaCodeEasyJSON    `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"diagnosisReference\":"
		out.RawString(prefix[1:])
		(in.DiagnosisReference).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.Type {
				if v140 > 0 {
					out.RawByte(',')
				}
				(v141).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode13(in *jlexer.Lexer, out *struct {
	Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
	ID           string                     `json:"id"`
	Intent       string                     `json:"intent"`
	Payor        []syntheaReferenceEasyJSON `json:"payor"`
	Performer    []syntheaReferenceEasyJSON `json:"performer"`
	Requester    syntheaReferenceEasyJSON   `json:"requester"`
	ResourceType string                     `json:"resourceType"`
	Status       string                     `json:"status"`
	Subject      syntheaReferenceEasyJSON   `json:"subject"`
	Type         syntheaCodeEasyJSON        `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "beneficiary":
			(out.Beneficiary).UnmarshalEasyJSON(in)
		case "id":
			out.ID = string(in.String())
		case "intent":
			out.Intent = string(in.String())
		case "payor":
			if in.IsNull() {
				in.Skip()
				out.Payor = nil
			} else {
				in.Delim('[')
				if out.Payor == nil {
					if !in.IsDelim(']') {
						out.Payor = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Payor = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Payor = (out.Payor)[:0]
				}
				for !in.IsDelim(']') {
					var v142 syntheaReferenceEasyJSON
					(v142).UnmarshalEasyJSON(in)
					out.Payor = append(out.Payor, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "performer":
			if in.IsNull() {
				in.Skip()
				out.Performer = nil
			} else {
				in.Delim('[')
				if out.Performer == nil {
					if !in.IsDelim(']') {
						out.Performer = make([]syntheaReferenceEasyJSON, 0, 2)
					} else {
						out.Performer = []syntheaReferenceEasyJSON{}
					}
				} else {
					out.Performer = (out.Performer)[:0]
				}
				for !in.IsDelim(']') {
					var v143 syntheaReferenceEasyJSON
					(v143).UnmarshalEasyJSON(in)
					out.Performer = append(out.Performer, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requester":
			(out.Requester).UnmarshalEasyJSON(in)
		case "resourceType":
			out.ResourceType = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "subject":
			(out.Subject).UnmarshalEasyJSON(in)
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode13(out *jwriter.Writer, in struct {
	Beneficiary  syntheaReferenceEasyJSON   `json:"beneficiary"`
	ID           string                     `json:"id"`
	Intent       string                     `json:"intent"`
	Payor        []syntheaReferenceEasyJSON `json:"payor"`
	Performer    []syntheaReferenceEasyJSON `json:"performer"`
	Requester    syntheaReferenceEasyJSON   `json:"requester"`
	ResourceType string                     `json:"resourceType"`
	Status       string                     `json:"status"`
	Subject      syntheaReferenceEasyJSON   `json:"subject"`
	Type         syntheaCodeEasyJSON        `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"beneficiary\":"
		out.RawString(prefix[1:])
		(in.Beneficiary).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"intent\":"
		out.RawString(prefix)
		out.String(string(in.Intent))
	}
	{
		const prefix string = ",\"payor\":"
		out.RawString(prefix)
		if in.Payor == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v144, v145 := range in.Payor {
				if v144 > 0 {
					out.RawByte(',')
				}
				(v145).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"performer\":"
		out.RawString(prefix)
		if in.Performer == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v146, v147 := range in.Performer {
				if v146 > 0 {
					out.RawByte(',')
				}
				(v147).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"requester\":"
		out.RawString(prefix)
		(in.Requester).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resourceType\":"
		out.RawString(prefix)
		out.String(string(in.ResourceType))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		(in.Subject).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode12(in *jlexer.Lexer, out *struct {
	Code          syntheaCodeEasyJSON   `json:"code"`
	ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			(out.Code).UnmarshalEasyJSON(in)
		case "valueQuantity":
			(out.ValueQuantity).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode12(out *jwriter.Writer, in struct {
	Code          syntheaCodeEasyJSON   `json:"code"`
	ValueQuantity syntheaCodingEasyJSON `json:"valueQuantity"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		(in.Code).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"valueQuantity\":"
		out.RawString(prefix)
		(in.ValueQuantity).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode11(in *jlexer.Lexer, out *struct {
	Language syntheaCodeEasyJSON `json:"language"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "language":
			(out.Language).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode11(out *jwriter.Writer, in struct {
	Language syntheaCodeEasyJSON `json:"language"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix[1:])
		(in.Language).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode10(in *jlexer.Lexer, out *struct {
	Provider  syntheaReferenceEasyJSON `json:"provider"`
	Reference string                   `json:"reference"`
	Role      syntheaCodeEasyJSON      `json:"role"`
	Sequence  int64                    `json:"sequence"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "provider":
			(out.Provider).UnmarshalEasyJSON(in)
		case "reference":
			out.Reference = string(in.String())
		case "role":
			(out.Role).UnmarshalEasyJSON(in)
		case "sequence":
			out.Sequence = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode10(out *jwriter.Writer, in struct {
	Provider  syntheaReferenceEasyJSON `json:"provider"`
	Reference string                   `json:"reference"`
	Role      syntheaCodeEasyJSON      `json:"role"`
	Sequence  int64                    `json:"sequence"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix[1:])
		(in.Provider).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix)
		out.String(string(in.Reference))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		(in.Role).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode9(in *jlexer.Lexer, out *struct {
	Detail *struct {
		Code     syntheaCodeEasyJSON      `json:"code"`
		Location syntheaReferenceEasyJSON `json:"location"`
		Status   string                   `json:"status"`
	} `json:"detail"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "detail":
			if in.IsNull() {
				in.Skip()
				out.Detail = nil
			} else {
				if out.Detail == nil {
					out.Detail = new(struct {
						Code     syntheaCodeEasyJSON      `json:"code"`
						Location syntheaReferenceEasyJSON `json:"location"`
						Status   string                   `json:"status"`
					})
				}
				easyjsonC5a4559bDecode30(in, out.Detail)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode9(out *jwriter.Writer, in struct {
	Detail *struct {
		Code     syntheaCodeEasyJSON      `json:"code"`
		Location syntheaReferenceEasyJSON `json:"location"`
		Status   string                   `json:"status"`
	} `json:"detail"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"detail\":"
		out.RawString(prefix[1:])
		if in.Detail == nil {
			out.RawString("null")
		} else {
			easyjsonC5a4559bEncode30(out, *in.Detail)
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode30(in *jlexer.Lexer, out *struct {
	Code     syntheaCodeEasyJSON      `json:"code"`
	Location syntheaReferenceEasyJSON `json:"location"`
	Status   string                   `json:"status"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			(out.Code).UnmarshalEasyJSON(in)
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode30(out *jwriter.Writer, in struct {
	Code     syntheaCodeEasyJSON      `json:"code"`
	Location syntheaReferenceEasyJSON `json:"location"`
	Status   string                   `json:"status"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		(in.Code).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode7(in *jlexer.Lexer, out *struct {
	Method string `json:"method"`
	URL    string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode7(out *jwriter.Writer, in struct {
	Method string `json:"method"`
	URL    string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeTest6(in *jlexer.Lexer, out *syntheaReferenceEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "display":
			out.Display = string(in.String())
		case "reference":
			out.Reference = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest6(out *jwriter.Writer, in syntheaReferenceEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"display\":"
		out.RawString(prefix[1:])
		out.String(string(in.Display))
	}
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix)
		out.String(string(in.Reference))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaReferenceEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaReferenceEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaReferenceEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaReferenceEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest6(l, v)
}
func easyjsonC5a4559bDecodeTest7(in *jlexer.Lexer, out *syntheaRangeEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.End).UnmarshalJSON(data))
			}
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest7(out *jwriter.Writer, in syntheaRangeEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix[1:])
		out.Raw((in.End).MarshalJSON())
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaRangeEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaRangeEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaRangeEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaRangeEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest7(l, v)
}
func easyjsonC5a4559bDecodeTest8(in *jlexer.Lexer, out *syntheaExtensionEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "valueAddress":
			(out.ValueAddress).UnmarshalEasyJSON(in)
		case "valueCode":
			out.ValueCode = string(in.String())
		case "valueDecimal":
			out.ValueDecimal = float64(in.Float64())
		case "valueString":
			out.ValueString = string(in.String())
		case "extension":
			if in.IsNull() {
				in.Skip()
				out.Extension = nil
			} else {
				in.Delim('[')
				if out.Extension == nil {
					if !in.IsDelim(']') {
						out.Extension = make([]syntheaExtensionEasyJSON, 0, 0)
					} else {
						out.Extension = []syntheaExtensionEasyJSON{}
					}
				} else {
					out.Extension = (out.Extension)[:0]
				}
				for !in.IsDelim(']') {
					var v148 syntheaExtensionEasyJSON
					(v148).UnmarshalEasyJSON(in)
					out.Extension = append(out.Extension, v148)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest8(out *jwriter.Writer, in syntheaExtensionEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"valueAddress\":"
		out.RawString(prefix)
		(in.ValueAddress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"valueCode\":"
		out.RawString(prefix)
		out.String(string(in.ValueCode))
	}
	{
		const prefix string = ",\"valueDecimal\":"
		out.RawString(prefix)
		out.Float64(float64(in.ValueDecimal))
	}
	{
		const prefix string = ",\"valueString\":"
		out.RawString(prefix)
		out.String(string(in.ValueString))
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		if in.Extension == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v149, v150 := range in.Extension {
				if v149 > 0 {
					out.RawByte(',')
				}
				(v150).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaExtensionEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaExtensionEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaExtensionEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaExtensionEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest8(l, v)
}
func easyjsonC5a4559bDecodeTest9(in *jlexer.Lexer, out *syntheaCurrencyEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest9(out *jwriter.Writer, in syntheaCurrencyEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix[1:])
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaCurrencyEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaCurrencyEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaCurrencyEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaCurrencyEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest9(l, v)
}
func easyjsonC5a4559bDecodeTest10(in *jlexer.Lexer, out *syntheaCodingEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "display":
			out.Display = string(in.String())
		case "system":
			out.System = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest10(out *jwriter.Writer, in syntheaCodingEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"display\":"
		out.RawString(prefix)
		out.String(string(in.Display))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaCodingEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaCodingEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaCodingEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaCodingEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest10(l, v)
}
func easyjsonC5a4559bDecodeTest11(in *jlexer.Lexer, out *syntheaCodeEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coding":
			if in.IsNull() {
				in.Skip()
				out.Coding = nil
			} else {
				in.Delim('[')
				if out.Coding == nil {
					if !in.IsDelim(']') {
						out.Coding = make([]syntheaCodingEasyJSON, 0, 0)
					} else {
						out.Coding = []syntheaCodingEasyJSON{}
					}
				} else {
					out.Coding = (out.Coding)[:0]
				}
				for !in.IsDelim(']') {
					var v151 syntheaCodingEasyJSON
					(v151).UnmarshalEasyJSON(in)
					out.Coding = append(out.Coding, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest11(out *jwriter.Writer, in syntheaCodeEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coding\":"
		out.RawString(prefix[1:])
		if in.Coding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v152, v153 := range in.Coding {
				if v152 > 0 {
					out.RawByte(',')
				}
				(v153).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaCodeEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaCodeEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaCodeEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaCodeEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest11(l, v)
}
func easyjsonC5a4559bDecodeTest12(in *jlexer.Lexer, out *syntheaAddressEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "extension":
			if in.IsNull() {
				in.Skip()
				out.Extension = nil
			} else {
				in.Delim('[')
				if out.Extension == nil {
					if !in.IsDelim(']') {
						out.Extension = make([]syntheaExtensionEasyJSON, 0, 0)
					} else {
						out.Extension = []syntheaExtensionEasyJSON{}
					}
				} else {
					out.Extension = (out.Extension)[:0]
				}
				for !in.IsDelim(']') {
					var v154 syntheaExtensionEasyJSON
					(v154).UnmarshalEasyJSON(in)
					out.Extension = append(out.Extension, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "line":
			if in.IsNull() {
				in.Skip()
				out.Line = nil
			} else {
				in.Delim('[')
				if out.Line == nil {
					if !in.IsDelim(']') {
						out.Line = make([]string, 0, 4)
					} else {
						out.Line = []string{}
					}
				} else {
					out.Line = (out.Line)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.Line = append(out.Line, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postalCode":
			out.PostalCode = string(in.String())
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest12(out *jwriter.Writer, in syntheaAddressEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix[1:])
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		if in.Extension == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v156, v157 := range in.Extension {
				if v156 > 0 {
					out.RawByte(',')
				}
				(v157).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix)
		if in.Line == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v158, v159 := range in.Line {
				if v158 > 0 {
					out.RawByte(',')
				}
				out.String(string(v159))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"postalCode\":"
		out.RawString(prefix)
		out.String(string(in.PostalCode))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v syntheaAddressEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v syntheaAddressEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *syntheaAddressEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *syntheaAddressEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest12(l, v)
}
func easyjsonC5a4559bDecodeTest13(in *jlexer.Lexer, out *stringRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Arabic":
			out.Arabic = string(in.String())
		case "Arabic Presentation Forms-A":
			out.ArabicPresentationFormsA = string(in.String())
		case "Arabic Presentation Forms-B":
			out.ArabicPresentationFormsB = string(in.String())
		case "Armenian":
			out.Armenian = string(in.String())
		case "Arrows":
			out.Arrows = string(in.String())
		case "Bengali":
			out.Bengali = string(in.String())
		case "Bopomofo":
			out.Bopomofo = string(in.String())
		case "Box Drawing":
			out.BoxDrawing = string(in.String())
		case "CJK Compatibility":
			out.CJKCompatibility = string(in.String())
		case "CJK Compatibility Forms":
			out.CJKCompatibilityForms = string(in.String())
		case "CJK Compatibility Ideographs":
			out.CJKCompatibilityIdeographs = string(in.String())
		case "CJK Symbols and Punctuation":
			out.CJKSymbolsAndPunctuation = string(in.String())
		case "CJK Unified Ideographs":
			out.CJKUnifiedIdeographs = string(in.String())
		case "CJK Unified Ideographs Extension A":
			out.CJKUnifiedIdeographsExtensionA = string(in.String())
		case "CJK Unified Ideographs Extension B":
			out.CJKUnifiedIdeographsExtensionB = string(in.String())
		case "Cherokee":
			out.Cherokee = string(in.String())
		case "Currency Symbols":
			out.CurrencySymbols = string(in.String())
		case "Cyrillic":
			out.Cyrillic = string(in.String())
		case "Cyrillic Supplementary":
			out.CyrillicSupplementary = string(in.String())
		case "Devanagari":
			out.Devanagari = string(in.String())
		case "Enclosed Alphanumerics":
			out.EnclosedAlphanumerics = string(in.String())
		case "Enclosed CJK Letters and Months":
			out.EnclosedCJKLettersAndMonths = string(in.String())
		case "Ethiopic":
			out.Ethiopic = string(in.String())
		case "Geometric Shapes":
			out.GeometricShapes = string(in.String())
		case "Georgian":
			out.Georgian = string(in.String())
		case "Greek and Coptic":
			out.GreekAndCoptic = string(in.String())
		case "Gujarati":
			out.Gujarati = string(in.String())
		case "Gurmukhi":
			out.Gurmukhi = string(in.String())
		case "Hangul Compatibility Jamo":
			out.HangulCompatibilityJamo = string(in.String())
		case "Hangul Jamo":
			out.HangulJamo = string(in.String())
		case "Hangul Syllables":
			out.HangulSyllables = string(in.String())
		case "Hebrew":
			out.Hebrew = string(in.String())
		case "Hiragana":
			out.Hiragana = string(in.String())
		case "IPA Extentions":
			out.IPAExtentions = string(in.String())
		case "Kangxi Radicals":
			out.KangxiRadicals = string(in.String())
		case "Katakana":
			out.Katakana = string(in.String())
		case "Khmer":
			out.Khmer = string(in.String())
		case "Khmer Symbols":
			out.KhmerSymbols = string(in.String())
		case "Latin":
			out.Latin = string(in.String())
		case "Latin Extended Additional":
			out.LatinExtendedAdditional = string(in.String())
		case "Latin-1 Supplement":
			out.Latin1Supplement = string(in.String())
		case "Latin-Extended A":
			out.LatinExtendedA = string(in.String())
		case "Latin-Extended B":
			out.LatinExtendedB = string(in.String())
		case "Letterlike Symbols":
			out.LetterlikeSymbols = string(in.String())
		case "Malayalam":
			out.Malayalam = string(in.String())
		case "Mathematical Alphanumeric Symbols":
			out.MathematicalAlphanumericSymbols = string(in.String())
		case "Mathematical Operators":
			out.MathematicalOperators = string(in.String())
		case "Miscellaneous Symbols":
			out.MiscellaneousSymbols = string(in.String())
		case "Mongolian":
			out.Mongolian = string(in.String())
		case "Number Forms":
			out.NumberForms = string(in.String())
		case "Oriya":
			out.Oriya = string(in.String())
		case "Phonetic Extensions":
			out.PhoneticExtensions = string(in.String())
		case "Supplemental Arrows-B":
			out.SupplementalArrowsB = string(in.String())
		case "Syriac":
			out.Syriac = string(in.String())
		case "Tamil":
			out.Tamil = string(in.String())
		case "Thaana":
			out.Thaana = string(in.String())
		case "Thai":
			out.Thai = string(in.String())
		case "Unified Canadian Aboriginal Syllabics":
			out.UnifiedCanadianAboriginalSyllabics = string(in.String())
		case "Yi Radicals":
			out.YiRadicals = string(in.String())
		case "Yi Syllables":
			out.YiSyllables = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest13(out *jwriter.Writer, in stringRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Arabic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Arabic))
	}
	{
		const prefix string = ",\"Arabic Presentation Forms-A\":"
		out.RawString(prefix)
		out.String(string(in.ArabicPresentationFormsA))
	}
	{
		const prefix string = ",\"Arabic Presentation Forms-B\":"
		out.RawString(prefix)
		out.String(string(in.ArabicPresentationFormsB))
	}
	{
		const prefix string = ",\"Armenian\":"
		out.RawString(prefix)
		out.String(string(in.Armenian))
	}
	{
		const prefix string = ",\"Arrows\":"
		out.RawString(prefix)
		out.String(string(in.Arrows))
	}
	{
		const prefix string = ",\"Bengali\":"
		out.RawString(prefix)
		out.String(string(in.Bengali))
	}
	{
		const prefix string = ",\"Bopomofo\":"
		out.RawString(prefix)
		out.String(string(in.Bopomofo))
	}
	{
		const prefix string = ",\"Box Drawing\":"
		out.RawString(prefix)
		out.String(string(in.BoxDrawing))
	}
	{
		const prefix string = ",\"CJK Compatibility\":"
		out.RawString(prefix)
		out.String(string(in.CJKCompatibility))
	}
	{
		const prefix string = ",\"CJK Compatibility Forms\":"
		out.RawString(prefix)
		out.String(string(in.CJKCompatibilityForms))
	}
	{
		const prefix string = ",\"CJK Compatibility Ideographs\":"
		out.RawString(prefix)
		out.String(string(in.CJKCompatibilityIdeographs))
	}
	{
		const prefix string = ",\"CJK Symbols and Punctuation\":"
		out.RawString(prefix)
		out.String(string(in.CJKSymbolsAndPunctuation))
	}
	{
		const prefix string = ",\"CJK Unified Ideographs\":"
		out.RawString(prefix)
		out.String(string(in.CJKUnifiedIdeographs))
	}
	{
		const prefix string = ",\"CJK Unified Ideographs Extension A\":"
		out.RawString(prefix)
		out.String(string(in.CJKUnifiedIdeographsExtensionA))
	}
	{
		const prefix string = ",\"CJK Unified Ideographs Extension B\":"
		out.RawString(prefix)
		out.String(string(in.CJKUnifiedIdeographsExtensionB))
	}
	{
		const prefix string = ",\"Cherokee\":"
		out.RawString(prefix)
		out.String(string(in.Cherokee))
	}
	{
		const prefix string = ",\"Currency Symbols\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbols))
	}
	{
		const prefix string = ",\"Cyrillic\":"
		out.RawString(prefix)
		out.String(string(in.Cyrillic))
	}
	{
		const prefix string = ",\"Cyrillic Supplementary\":"
		out.RawString(prefix)
		out.String(string(in.CyrillicSupplementary))
	}
	{
		const prefix string = ",\"Devanagari\":"
		out.RawString(prefix)
		out.String(string(in.Devanagari))
	}
	{
		const prefix string = ",\"Enclosed Alphanumerics\":"
		out.RawString(prefix)
		out.String(string(in.EnclosedAlphanumerics))
	}
	{
		const prefix string = ",\"Enclosed CJK Letters and Months\":"
		out.RawString(prefix)
		out.String(string(in.EnclosedCJKLettersAndMonths))
	}
	{
		const prefix string = ",\"Ethiopic\":"
		out.RawString(prefix)
		out.String(string(in.Ethiopic))
	}
	{
		const prefix string = ",\"Geometric Shapes\":"
		out.RawString(prefix)
		out.String(string(in.GeometricShapes))
	}
	{
		const prefix string = ",\"Georgian\":"
		out.RawString(prefix)
		out.String(string(in.Georgian))
	}
	{
		const prefix string = ",\"Greek and Coptic\":"
		out.RawString(prefix)
		out.String(string(in.GreekAndCoptic))
	}
	{
		const prefix string = ",\"Gujarati\":"
		out.RawString(prefix)
		out.String(string(in.Gujarati))
	}
	{
		const prefix string = ",\"Gurmukhi\":"
		out.RawString(prefix)
		out.String(string(in.Gurmukhi))
	}
	{
		const prefix string = ",\"Hangul Compatibility Jamo\":"
		out.RawString(prefix)
		out.String(string(in.HangulCompatibilityJamo))
	}
	{
		const prefix string = ",\"Hangul Jamo\":"
		out.RawString(prefix)
		out.String(string(in.HangulJamo))
	}
	{
		const prefix string = ",\"Hangul Syllables\":"
		out.RawString(prefix)
		out.String(string(in.HangulSyllables))
	}
	{
		const prefix string = ",\"Hebrew\":"
		out.RawString(prefix)
		out.String(string(in.Hebrew))
	}
	{
		const prefix string = ",\"Hiragana\":"
		out.RawString(prefix)
		out.String(string(in.Hiragana))
	}
	{
		const prefix string = ",\"IPA Extentions\":"
		out.RawString(prefix)
		out.String(string(in.IPAExtentions))
	}
	{
		const prefix string = ",\"Kangxi Radicals\":"
		out.RawString(prefix)
		out.String(string(in.KangxiRadicals))
	}
	{
		const prefix string = ",\"Katakana\":"
		out.RawString(prefix)
		out.String(string(in.Katakana))
	}
	{
		const prefix string = ",\"Khmer\":"
		out.RawString(prefix)
		out.String(string(in.Khmer))
	}
	{
		const prefix string = ",\"Khmer Symbols\":"
		out.RawString(prefix)
		out.String(string(in.KhmerSymbols))
	}
	{
		const prefix string = ",\"Latin\":"
		out.RawString(prefix)
		out.String(string(in.Latin))
	}
	{
		const prefix string = ",\"Latin Extended Additional\":"
		out.RawString(prefix)
		out.String(string(in.LatinExtendedAdditional))
	}
	{
		const prefix string = ",\"Latin-1 Supplement\":"
		out.RawString(prefix)
		out.String(string(in.Latin1Supplement))
	}
	{
		const prefix string = ",\"Latin-Extended A\":"
		out.RawString(prefix)
		out.String(string(in.LatinExtendedA))
	}
	{
		const prefix string = ",\"Latin-Extended B\":"
		out.RawString(prefix)
		out.String(string(in.LatinExtendedB))
	}
	{
		const prefix string = ",\"Letterlike Symbols\":"
		out.RawString(prefix)
		out.String(string(in.LetterlikeSymbols))
	}
	{
		const prefix string = ",\"Malayalam\":"
		out.RawString(prefix)
		out.String(string(in.Malayalam))
	}
	{
		const prefix string = ",\"Mathematical Alphanumeric Symbols\":"
		out.RawString(prefix)
		out.String(string(in.MathematicalAlphanumericSymbols))
	}
	{
		const prefix string = ",\"Mathematical Operators\":"
		out.RawString(prefix)
		out.String(string(in.MathematicalOperators))
	}
	{
		const prefix string = ",\"Miscellaneous Symbols\":"
		out.RawString(prefix)
		out.String(string(in.MiscellaneousSymbols))
	}
	{
		const prefix string = ",\"Mongolian\":"
		out.RawString(prefix)
		out.String(string(in.Mongolian))
	}
	{
		const prefix string = ",\"Number Forms\":"
		out.RawString(prefix)
		out.String(string(in.NumberForms))
	}
	{
		const prefix string = ",\"Oriya\":"
		out.RawString(prefix)
		out.String(string(in.Oriya))
	}
	{
		const prefix string = ",\"Phonetic Extensions\":"
		out.RawString(prefix)
		out.String(string(in.PhoneticExtensions))
	}
	{
		const prefix string = ",\"Supplemental Arrows-B\":"
		out.RawString(prefix)
		out.String(string(in.SupplementalArrowsB))
	}
	{
		const prefix string = ",\"Syriac\":"
		out.RawString(prefix)
		out.String(string(in.Syriac))
	}
	{
		const prefix string = ",\"Tamil\":"
		out.RawString(prefix)
		out.String(string(in.Tamil))
	}
	{
		const prefix string = ",\"Thaana\":"
		out.RawString(prefix)
		out.String(string(in.Thaana))
	}
	{
		const prefix string = ",\"Thai\":"
		out.RawString(prefix)
		out.String(string(in.Thai))
	}
	{
		const prefix string = ",\"Unified Canadian Aboriginal Syllabics\":"
		out.RawString(prefix)
		out.String(string(in.UnifiedCanadianAboriginalSyllabics))
	}
	{
		const prefix string = ",\"Yi Radicals\":"
		out.RawString(prefix)
		out.String(string(in.YiRadicals))
	}
	{
		const prefix string = ",\"Yi Syllables\":"
		out.RawString(prefix)
		out.String(string(in.YiSyllables))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stringRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stringRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stringRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stringRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest13(l, v)
}
func easyjsonC5a4559bDecodeTest14(in *jlexer.Lexer, out *golangRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tree":
			if in.IsNull() {
				in.Skip()
				out.Tree = nil
			} else {
				if out.Tree == nil {
					out.Tree = new(golangNodeEasyJSON)
				}
				(*out.Tree).UnmarshalEasyJSON(in)
			}
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest14(out *jwriter.Writer, in golangRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tree\":"
		out.RawString(prefix[1:])
		if in.Tree == nil {
			out.RawString("null")
		} else {
			(*in.Tree).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v golangRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v golangRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *golangRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *golangRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest14(l, v)
}
func easyjsonC5a4559bDecodeTest15(in *jlexer.Lexer, out *golangNodeEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "kids":
			if in.IsNull() {
				in.Skip()
				out.Kids = nil
			} else {
				in.Delim('[')
				if out.Kids == nil {
					if !in.IsDelim(']') {
						out.Kids = make([]golangNodeEasyJSON, 0, 0)
					} else {
						out.Kids = []golangNodeEasyJSON{}
					}
				} else {
					out.Kids = (out.Kids)[:0]
				}
				for !in.IsDelim(']') {
					var v160 golangNodeEasyJSON
					(v160).UnmarshalEasyJSON(in)
					out.Kids = append(out.Kids, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cl_weight":
			out.CLWeight = float64(in.Float64())
		case "touches":
			out.Touches = int(in.Int())
		case "min_t":
			out.MinT = uint64(in.Uint64())
		case "max_t":
			out.MaxT = uint64(in.Uint64())
		case "mean_t":
			out.MeanT = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest15(out *jwriter.Writer, in golangNodeEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"kids\":"
		out.RawString(prefix)
		if in.Kids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v161, v162 := range in.Kids {
				if v161 > 0 {
					out.RawByte(',')
				}
				(v162).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cl_weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CLWeight))
	}
	{
		const prefix string = ",\"touches\":"
		out.RawString(prefix)
		out.Int(int(in.Touches))
	}
	{
		const prefix string = ",\"min_t\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MinT))
	}
	{
		const prefix string = ",\"max_t\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MaxT))
	}
	{
		const prefix string = ",\"mean_t\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MeanT))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v golangNodeEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v golangNodeEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *golangNodeEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *golangNodeEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest15(l, v)
}
func easyjsonC5a4559bDecodeTest16(in *jlexer.Lexer, out *citmRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areaNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AreaNames = make(map[int64]string)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v163 string
					v163 = string(in.String())
					(out.AreaNames)[key] = v163
					in.WantComma()
				}
				in.Delim('}')
			}
		case "audienceSubCategoryNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AudienceSubCategoryNames = make(map[int64]string)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v164 string
					v164 = string(in.String())
					(out.AudienceSubCategoryNames)[key] = v164
					in.WantComma()
				}
				in.Delim('}')
			}
		case "blockNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BlockNames = make(map[int64]string)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v165 string
					v165 = string(in.String())
					(out.BlockNames)[key] = v165
					in.WantComma()
				}
				in.Delim('}')
			}
		case "events":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Events = make(map[int64]struct {
					Description string      `json:"description"`
					ID          int         `json:"id"`
					Logo        string      `json:"logo"`
					Name        string      `json:"name"`
					SubTopicIds []int       `json:"subTopicIds"`
					SubjectCode interface{} `json:"subjectCode"`
					Subtitle    interface{} `json:"subtitle"`
					TopicIds    []int       `json:"topicIds"`
				})
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v166 struct {
						Description string      `json:"description"`
						ID          int         `json:"id"`
						Logo        string      `json:"logo"`
						Name        string      `json:"name"`
						SubTopicIds []int       `json:"subTopicIds"`
						SubjectCode interface{} `json:"subjectCode"`
						Subtitle    interface{} `json:"subtitle"`
						TopicIds    []int       `json:"topicIds"`
					}
					easyjsonC5a4559bDecode31(in, &v166)
					(out.Events)[key] = v166
					in.WantComma()
				}
				in.Delim('}')
			}
		case "performances":
			if in.IsNull() {
				in.Skip()
				out.Performances = nil
			} else {
				in.Delim('[')
				if out.Performances == nil {
					if !in.IsDelim(']') {
						out.Performances = make([]struct {
							EventID int         `json:"eventId"`
							ID      int         `json:"id"`
							Logo    interface{} `json:"logo"`
							Name    interface{} `json:"name"`
							Prices  []struct {
								Amount                int   `json:"amount"`
								AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
								SeatCategoryID        int64 `json:"seatCategoryId"`
							} `json:"prices"`
							SeatCategories []struct {
								Areas []struct {
									AreaID   int           `json:"areaId"`
									BlockIds []interface{} `json:"blockIds"`
								} `json:"areas"`
								SeatCategoryID int `json:"seatCategoryId"`
							} `json:"seatCategories"`
							SeatMapImage interface{} `json:"seatMapImage"`
							Start        int64       `json:"start"`
							VenueCode    string      `json:"venueCode"`
						}, 0, 0)
					} else {
						out.Performances = []struct {
							EventID int         `json:"eventId"`
							ID      int         `json:"id"`
							Logo    interface{} `json:"logo"`
							Name    interface{} `json:"name"`
							Prices  []struct {
								Amount                int   `json:"amount"`
								AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
								SeatCategoryID        int64 `json:"seatCategoryId"`
							} `json:"prices"`
							SeatCategories []struct {
								Areas []struct {
									AreaID   int           `json:"areaId"`
									BlockIds []interface{} `json:"blockIds"`
								} `json:"areas"`
								SeatCategoryID int `json:"seatCategoryId"`
							} `json:"seatCategories"`
							SeatMapImage interface{} `json:"seatMapImage"`
							Start        int64       `json:"start"`
							VenueCode    string      `json:"venueCode"`
						}{}
					}
				} else {
					out.Performances = (out.Performances)[:0]
				}
				for !in.IsDelim(']') {
					var v167 struct {
						EventID int         `json:"eventId"`
						ID      int         `json:"id"`
						Logo    interface{} `json:"logo"`
						Name    interface{} `json:"name"`
						Prices  []struct {
							Amount                int   `json:"amount"`
							AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
							SeatCategoryID        int64 `json:"seatCategoryId"`
						} `json:"prices"`
						SeatCategories []struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						} `json:"seatCategories"`
						SeatMapImage interface{} `json:"seatMapImage"`
						Start        int64       `json:"start"`
						VenueCode    string      `json:"venueCode"`
					}
					easyjsonC5a4559bDecode32(in, &v167)
					out.Performances = append(out.Performances, v167)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategoryNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SeatCategoryNames = make(map[uint64]string)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v168 string
					v168 = string(in.String())
					(out.SeatCategoryNames)[key] = v168
					in.WantComma()
				}
				in.Delim('}')
			}
		case "subTopicNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SubTopicNames = make(map[uint64]string)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v169 string
					v169 = string(in.String())
					(out.SubTopicNames)[key] = v169
					in.WantComma()
				}
				in.Delim('}')
			}
		case "subjectNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SubjectNames = make(map[uint64]string)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v170 string
					v170 = string(in.String())
					(out.SubjectNames)[key] = v170
					in.WantComma()
				}
				in.Delim('}')
			}
		case "topicNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TopicNames = make(map[uint64]string)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v171 string
					v171 = string(in.String())
					(out.TopicNames)[key] = v171
					in.WantComma()
				}
				in.Delim('}')
			}
		case "topicSubTopics":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TopicSubTopics = make(map[uint64][]uint64)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v172 []uint64
					if in.IsNull() {
						in.Skip()
						v172 = nil
					} else {
						in.Delim('[')
						if v172 == nil {
							if !in.IsDelim(']') {
								v172 = make([]uint64, 0, 8)
							} else {
								v172 = []uint64{}
							}
						} else {
							v172 = (v172)[:0]
						}
						for !in.IsDelim(']') {
							var v173 uint64
							v173 = uint64(in.Uint64())
							v172 = append(v172, v173)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.TopicSubTopics)[key] = v172
					in.WantComma()
				}
				in.Delim('}')
			}
		case "venueNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.VenueNames = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v174 string
					v174 = string(in.String())
					(out.VenueNames)[key] = v174
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest16(out *jwriter.Writer, in citmRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areaNames\":"
		out.RawString(prefix[1:])
		if in.AreaNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v175First := true
			for v175Name, v175Value := range in.AreaNames {
				if v175First {
					v175First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v175Name))
				out.RawByte(':')
				out.String(string(v175Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"audienceSubCategoryNames\":"
		out.RawString(prefix)
		if in.AudienceSubCategoryNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v176First := true
			for v176Name, v176Value := range in.AudienceSubCategoryNames {
				if v176First {
					v176First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v176Name))
				out.RawByte(':')
				out.String(string(v176Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"blockNames\":"
		out.RawString(prefix)
		if in.BlockNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v177First := true
			for v177Name, v177Value := range in.BlockNames {
				if v177First {
					v177First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v177Name))
				out.RawByte(':')
				out.String(string(v177Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v178First := true
			for v178Name, v178Value := range in.Events {
				if v178First {
					v178First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v178Name))
				out.RawByte(':')
				easyjsonC5a4559bEncode31(out, v178Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"performances\":"
		out.RawString(prefix)
		if in.Performances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v179, v180 := range in.Performances {
				if v179 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode32(out, v180)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategoryNames\":"
		out.RawString(prefix)
		if in.SeatCategoryNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v181First := true
			for v181Name, v181Value := range in.SeatCategoryNames {
				if v181First {
					v181First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v181Name))
				out.RawByte(':')
				out.String(string(v181Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"subTopicNames\":"
		out.RawString(prefix)
		if in.SubTopicNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v182First := true
			for v182Name, v182Value := range in.SubTopicNames {
				if v182First {
					v182First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v182Name))
				out.RawByte(':')
				out.String(string(v182Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"subjectNames\":"
		out.RawString(prefix)
		if in.SubjectNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v183First := true
			for v183Name, v183Value := range in.SubjectNames {
				if v183First {
					v183First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v183Name))
				out.RawByte(':')
				out.String(string(v183Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"topicNames\":"
		out.RawString(prefix)
		if in.TopicNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v184First := true
			for v184Name, v184Value := range in.TopicNames {
				if v184First {
					v184First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v184Name))
				out.RawByte(':')
				out.String(string(v184Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"topicSubTopics\":"
		out.RawString(prefix)
		if in.TopicSubTopics == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v185First := true
			for v185Name, v185Value := range in.TopicSubTopics {
				if v185First {
					v185First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v185Name))
				out.RawByte(':')
				if v185Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v186, v187 := range v185Value {
						if v186 > 0 {
							out.RawByte(',')
						}
						out.Uint64(uint64(v187))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"venueNames\":"
		out.RawString(prefix)
		if in.VenueNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v188First := true
			for v188Name, v188Value := range in.VenueNames {
				if v188First {
					v188First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v188Name))
				out.RawByte(':')
				out.String(string(v188Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v citmRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v citmRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *citmRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *citmRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest16(l, v)
}
func easyjsonC5a4559bDecode32(in *jlexer.Lexer, out *struct {
	EventID int         `json:"eventId"`
	ID      int         `json:"id"`
	Logo    interface{} `json:"logo"`
	Name    interface{} `json:"name"`
	Prices  []struct {
		Amount                int   `json:"amount"`
		AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
		SeatCategoryID        int64 `json:"seatCategoryId"`
	} `json:"prices"`
	SeatCategories []struct {
		Areas []struct {
			AreaID   int           `json:"areaId"`
			BlockIds []interface{} `json:"blockIds"`
		} `json:"areas"`
		SeatCategoryID int `json:"seatCategoryId"`
	} `json:"seatCategories"`
	SeatMapImage interface{} `json:"seatMapImage"`
	Start        int64       `json:"start"`
	VenueCode    string      `json:"venueCode"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventId":
			out.EventID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "logo":
			if m, ok := out.Logo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Logo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Logo = in.Interface()
			}
		case "name":
			if m, ok := out.Name.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Name.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Name = in.Interface()
			}
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make([]struct {
							Amount                int   `json:"amount"`
							AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
							SeatCategoryID        int64 `json:"seatCategoryId"`
						}, 0, 2)
					} else {
						out.Prices = []struct {
							Amount                int   `json:"amount"`
							AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
							SeatCategoryID        int64 `json:"seatCategoryId"`
						}{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v189 struct {
						Amount                int   `json:"amount"`
						AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
						SeatCategoryID        int64 `json:"seatCategoryId"`
					}
					easyjsonC5a4559bDecode33(in, &v189)
					out.Prices = append(out.Prices, v189)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategories":
			if in.IsNull() {
				in.Skip()
				out.SeatCategories = nil
			} else {
				in.Delim('[')
				if out.SeatCategories == nil {
					if !in.IsDelim(']') {
						out.SeatCategories = make([]struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						}, 0, 2)
					} else {
						out.SeatCategories = []struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						}{}
					}
				} else {
					out.SeatCategories = (out.SeatCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v190 struct {
						Areas []struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						} `json:"areas"`
						SeatCategoryID int `json:"seatCategoryId"`
					}
					easyjsonC5a4559bDecode34(in, &v190)
					out.SeatCategories = append(out.SeatCategories, v190)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatMapImage":
			if m, ok := out.SeatMapImage.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SeatMapImage.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SeatMapImage = in.Interface()
			}
		case "start":
			out.Start = int64(in.Int64())
		case "venueCode":
			out.VenueCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode32(out *jwriter.Writer, in struct {
	EventID int         `json:"eventId"`
	ID      int         `json:"id"`
	Logo    interface{} `json:"logo"`
	Name    interface{} `json:"name"`
	Prices  []struct {
		Amount                int   `json:"amount"`
		AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
		SeatCategoryID        int64 `json:"seatCategoryId"`
	} `json:"prices"`
	SeatCategories []struct {
		Areas []struct {
			AreaID   int           `json:"areaId"`
			BlockIds []interface{} `json:"blockIds"`
		} `json:"areas"`
		SeatCategoryID int `json:"seatCategoryId"`
	} `json:"seatCategories"`
	SeatMapImage interface{} `json:"seatMapImage"`
	Start        int64       `json:"start"`
	VenueCode    string      `json:"venueCode"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EventID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		if m, ok := in.Logo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Logo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Logo))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if m, ok := in.Name.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Name.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Name))
		}
	}
	{
		const prefix string = ",\"prices\":"
		out.RawString(prefix)
		if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v191, v192 := range in.Prices {
				if v191 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode33(out, v192)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategories\":"
		out.RawString(prefix)
		if in.SeatCategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v193, v194 := range in.SeatCategories {
				if v193 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode34(out, v194)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatMapImage\":"
		out.RawString(prefix)
		if m, ok := in.SeatMapImage.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SeatMapImage.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SeatMapImage))
		}
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"venueCode\":"
		out.RawString(prefix)
		out.String(string(in.VenueCode))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode34(in *jlexer.Lexer, out *struct {
	Areas []struct {
		AreaID   int           `json:"areaId"`
		BlockIds []interface{} `json:"blockIds"`
	} `json:"areas"`
	SeatCategoryID int `json:"seatCategoryId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areas":
			if in.IsNull() {
				in.Skip()
				out.Areas = nil
			} else {
				in.Delim('[')
				if out.Areas == nil {
					if !in.IsDelim(']') {
						out.Areas = make([]struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						}, 0, 2)
					} else {
						out.Areas = []struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						}{}
					}
				} else {
					out.Areas = (out.Areas)[:0]
				}
				for !in.IsDelim(']') {
					var v195 struct {
						AreaID   int           `json:"areaId"`
						BlockIds []interface{} `json:"blockIds"`
					}
					easyjsonC5a4559bDecode35(in, &v195)
					out.Areas = append(out.Areas, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategoryId":
			out.SeatCategoryID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode34(out *jwriter.Writer, in struct {
	Areas []struct {
		AreaID   int           `json:"areaId"`
		BlockIds []interface{} `json:"blockIds"`
	} `json:"areas"`
	SeatCategoryID int `json:"seatCategoryId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areas\":"
		out.RawString(prefix[1:])
		if in.Areas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v196, v197 := range in.Areas {
				if v196 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode35(out, v197)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategoryId\":"
		out.RawString(prefix)
		out.Int(int(in.SeatCategoryID))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode35(in *jlexer.Lexer, out *struct {
	AreaID   int           `json:"areaId"`
	BlockIds []interface{} `json:"blockIds"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areaId":
			out.AreaID = int(in.Int())
		case "blockIds":
			if in.IsNull() {
				in.Skip()
				out.BlockIds = nil
			} else {
				in.Delim('[')
				if out.BlockIds == nil {
					if !in.IsDelim(']') {
						out.BlockIds = make([]interface{}, 0, 4)
					} else {
						out.BlockIds = []interface{}{}
					}
				} else {
					out.BlockIds = (out.BlockIds)[:0]
				}
				for !in.IsDelim(']') {
					var v198 interface{}
					if m, ok := v198.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v198.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v198 = in.Interface()
					}
					out.BlockIds = append(out.BlockIds, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode35(out *jwriter.Writer, in struct {
	AreaID   int           `json:"areaId"`
	BlockIds []interface{} `json:"blockIds"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areaId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AreaID))
	}
	{
		const prefix string = ",\"blockIds\":"
		out.RawString(prefix)
		if in.BlockIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v199, v200 := range in.BlockIds {
				if v199 > 0 {
					out.RawByte(',')
				}
				if m, ok := v200.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v200.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v200))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode33(in *jlexer.Lexer, out *struct {
	Amount                int   `json:"amount"`
	AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
	SeatCategoryID        int64 `json:"seatCategoryId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "audienceSubCategoryId":
			out.AudienceSubCategoryID = int64(in.Int64())
		case "seatCategoryId":
			out.SeatCategoryID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode33(out *jwriter.Writer, in struct {
	Amount                int   `json:"amount"`
	AudienceSubCategoryID int64 `json:"audienceSubCategoryId"`
	SeatCategoryID        int64 `json:"seatCategoryId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"audienceSubCategoryId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AudienceSubCategoryID))
	}
	{
		const prefix string = ",\"seatCategoryId\":"
		out.RawString(prefix)
		out.Int64(int64(in.SeatCategoryID))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode31(in *jlexer.Lexer, out *struct {
	Description string      `json:"description"`
	ID          int         `json:"id"`
	Logo        string      `json:"logo"`
	Name        string      `json:"name"`
	SubTopicIds []int       `json:"subTopicIds"`
	SubjectCode interface{} `json:"subjectCode"`
	Subtitle    interface{} `json:"subtitle"`
	TopicIds    []int       `json:"topicIds"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "logo":
			out.Logo = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "subTopicIds":
			if in.IsNull() {
				in.Skip()
				out.SubTopicIds = nil
			} else {
				in.Delim('[')
				if out.SubTopicIds == nil {
					if !in.IsDelim(']') {
						out.SubTopicIds = make([]int, 0, 8)
					} else {
						out.SubTopicIds = []int{}
					}
				} else {
					out.SubTopicIds = (out.SubTopicIds)[:0]
				}
				for !in.IsDelim(']') {
					var v201 int
					v201 = int(in.Int())
					out.SubTopicIds = append(out.SubTopicIds, v201)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subjectCode":
			if m, ok := out.SubjectCode.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SubjectCode.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SubjectCode = in.Interface()
			}
		case "subtitle":
			if m, ok := out.Subtitle.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Subtitle.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Subtitle = in.Interface()
			}
		case "topicIds":
			if in.IsNull() {
				in.Skip()
				out.TopicIds = nil
			} else {
				in.Delim('[')
				if out.TopicIds == nil {
					if !in.IsDelim(']') {
						out.TopicIds = make([]int, 0, 8)
					} else {
						out.TopicIds = []int{}
					}
				} else {
					out.TopicIds = (out.TopicIds)[:0]
				}
				for !in.IsDelim(']') {
					var v202 int
					v202 = int(in.Int())
					out.TopicIds = append(out.TopicIds, v202)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode31(out *jwriter.Writer, in struct {
	Description string      `json:"description"`
	ID          int         `json:"id"`
	Logo        string      `json:"logo"`
	Name        string      `json:"name"`
	SubTopicIds []int       `json:"subTopicIds"`
	SubjectCode interface{} `json:"subjectCode"`
	Subtitle    interface{} `json:"subtitle"`
	TopicIds    []int       `json:"topicIds"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.Logo))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"subTopicIds\":"
		out.RawString(prefix)
		if in.SubTopicIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v203, v204 := range in.SubTopicIds {
				if v203 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v204))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subjectCode\":"
		out.RawString(prefix)
		if m, ok := in.SubjectCode.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SubjectCode.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SubjectCode))
		}
	}
	{
		const prefix string = ",\"subtitle\":"
		out.RawString(prefix)
		if m, ok := in.Subtitle.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Subtitle.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Subtitle))
		}
	}
	{
		const prefix string = ",\"topicIds\":"
		out.RawString(prefix)
		if in.TopicIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v205, v206 := range in.TopicIds {
				if v205 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v206))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeTest17(in *jlexer.Lexer, out *canadaRootEasyJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]struct {
							Type       string `json:"type"`
							Properties struct {
								Name string `json:"name"`
							} `json:"properties"`
							Geometry struct {
								Type        string         `json:"type"`
								Coordinates [][][2]float64 `json:"coordinates"`
							} `json:"geometry"`
						}, 0, 0)
					} else {
						out.Features = []struct {
							Type       string `json:"type"`
							Properties struct {
								Name string `json:"name"`
							} `json:"properties"`
							Geometry struct {
								Type        string         `json:"type"`
								Coordinates [][][2]float64 `json:"coordinates"`
							} `json:"geometry"`
						}{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v207 struct {
						Type       string `json:"type"`
						Properties struct {
							Name string `json:"name"`
						} `json:"properties"`
						Geometry struct {
							Type        string         `json:"type"`
							Coordinates [][][2]float64 `json:"coordinates"`
						} `json:"geometry"`
					}
					easyjsonC5a4559bDecode36(in, &v207)
					out.Features = append(out.Features, v207)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTest17(out *jwriter.Writer, in canadaRootEasyJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v208, v209 := range in.Features {
				if v208 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncode36(out, v209)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v canadaRootEasyJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeTest17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v canadaRootEasyJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTest17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *canadaRootEasyJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeTest17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *canadaRootEasyJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTest17(l, v)
}
func easyjsonC5a4559bDecode36(in *jlexer.Lexer, out *struct {
	Type       string `json:"type"`
	Properties struct {
		Name string `json:"name"`
	} `json:"properties"`
	Geometry struct {
		Type        string         `json:"type"`
		Coordinates [][][2]float64 `json:"coordinates"`
	} `json:"geometry"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "properties":
			easyjsonC5a4559bDecode37(in, &out.Properties)
		case "geometry":
			easyjsonC5a4559bDecode38(in, &out.Geometry)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode36(out *jwriter.Writer, in struct {
	Type       string `json:"type"`
	Properties struct {
		Name string `json:"name"`
	} `json:"properties"`
	Geometry struct {
		Type        string         `json:"type"`
		Coordinates [][][2]float64 `json:"coordinates"`
	} `json:"geometry"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		easyjsonC5a4559bEncode37(out, in.Properties)
	}
	{
		const prefix string = ",\"geometry\":"
		out.RawString(prefix)
		easyjsonC5a4559bEncode38(out, in.Geometry)
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode38(in *jlexer.Lexer, out *struct {
	Type        string         `json:"type"`
	Coordinates [][][2]float64 `json:"coordinates"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				in.Delim('[')
				if out.Coordinates == nil {
					if !in.IsDelim(']') {
						out.Coordinates = make([][][2]float64, 0, 2)
					} else {
						out.Coordinates = [][][2]float64{}
					}
				} else {
					out.Coordinates = (out.Coordinates)[:0]
				}
				for !in.IsDelim(']') {
					var v210 [][2]float64
					if in.IsNull() {
						in.Skip()
						v210 = nil
					} else {
						in.Delim('[')
						if v210 == nil {
							if !in.IsDelim(']') {
								v210 = make([][2]float64, 0, 4)
							} else {
								v210 = [][2]float64{}
							}
						} else {
							v210 = (v210)[:0]
						}
						for !in.IsDelim(']') {
							var v211 [2]float64
							if in.IsNull() {
								in.Skip()
							} else {
								in.Delim('[')
								v212 := 0
								for !in.IsDelim(']') {
									if v212 < 2 {
										(v211)[v212] = float64(in.Float64())
										v212++
									} else {
										in.SkipRecursive()
									}
									in.WantComma()
								}
								in.Delim(']')
							}
							v210 = append(v210, v211)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Coordinates = append(out.Coordinates, v210)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode38(out *jwriter.Writer, in struct {
	Type        string         `json:"type"`
	Coordinates [][][2]float64 `json:"coordinates"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v213, v214 := range in.Coordinates {
				if v213 > 0 {
					out.RawByte(',')
				}
				if v214 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v215, v216 := range v214 {
						if v215 > 0 {
							out.RawByte(',')
						}
						out.RawByte('[')
						for v217 := range v216 {
							if v217 > 0 {
								out.RawByte(',')
							}
							out.Float64(float64((v216)[v217]))
						}
						out.RawByte(']')
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecode37(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncode37(out *jwriter.Writer, in struct {
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
